/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 22.10.2024 05:37:46

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 70368;
#else
constexpr int kTensorArenaSize = 69344;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0032501192763447762, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[5] = { 29160, -44927, -56523, -46989, -52465, };
const TfArray<1, int> tensor_dimension2 = { 1, { 5 } };
const TfArray<5, float> quant2_scale = { 5, { 0.00012160212645540014, 0.00010513012239243835, 8.7022090156096965e-05, 0.00010846226359717548, 9.2138900072313845e-05, } };
const TfArray<5, int> quant2_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[5*1*1*32] = { 
  /* [0][0][][] */ 53,23,0,-19,-56,54,-9,38,51,-10,-88,-44,-40,45,8,80,-17,-48,-58,-53,-25,24,-58,-81,3,-16,79,-127,2,53,-39,2, 
  /* [1][0][][] */ -32,94,69,105,40,76,5,-26,-80,-61,71,16,-115,48,-68,18,15,26,13,23,-54,79,62,-39,-19,10,-14,48,48,-127,47,-82, 
  /* [2][0][][] */ -91,-61,-40,-36,2,54,127,-57,67,59,-31,117,80,115,-115,-42,-6,-6,97,12,-31,-84,85,-114,39,0,42,-40,-35,-110,89,112, 
  /* [3][0][][] */ 44,-71,0,-18,94,-30,-29,-70,42,-38,-52,-69,-50,-31,31,-44,-82,-35,-18,28,-21,24,-32,28,48,97,13,-3,14,65,101,-127, 
  /* [4][0][][] */ -100,-63,81,-56,10,44,-67,-86,84,92,85,-99,-43,-76,92,8,74,-63,-30,90,19,-39,-17,110,-9,-91,-112,-127,-84,117,-46,-83, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 5,1,1,32 } };
const TfArray<5, float> quant3_scale = { 5, { 0.0049433284439146519, 0.0042737140320241451, 0.0035375924780964851, 0.004409171175211668, 0.0037455994170159101, } };
const TfArray<5, int> quant3_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 1699, -307, 520, 298, 782, 655, 606, -384, 547, 563, 566, 205, 666, 281, 792, -448, -384, -390, 594, 499, -635, -172, -471, 698, 735, 726, 854, -12, -704, 1027, 832, -386, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 7.2218339482787997e-05, 5.6938592024380341e-05, 6.1574115534313023e-05, 5.5807464377721772e-05, 5.8543257182464004e-05, 5.37126325070858e-05, 5.9703430451918393e-05, 5.4706793889636174e-05, 6.5321393776684999e-05, 6.0315349401207641e-05, 5.6322583986911923e-05, 6.0243208281463012e-05, 6.3407795096281916e-05, 5.6455974117852747e-05, 6.1626022215932608e-05, 7.2395414463244379e-05, 5.9383321058703586e-05, 5.4359465138986707e-05, 6.4794498030096292e-05, 5.4605858167633414e-05, 5.4853069741511717e-05, 5.7774355809669942e-05, 5.336584581527859e-05, 6.0657806898234412e-05, 6.1966406065039337e-05, 6.7202425270806998e-05, 7.4592724558897316e-05, 6.2028288084547967e-05, 5.36740044481121e-05, 5.9428297390695661e-05, 6.3752842834219337e-05, 5.3723775636171922e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ 71,-44,77,5,94,19,-84,-43,-2,-97,-66,37,127,12,11,29,-29,29,-2,-18,5,-43,31,82,-13,54,85,-4,112,93,14,-6,88,-50,0,77,-53,-42,-42,22,83,-93,-42,112,60,-32,102,12, 
  /* [1][0][][] */ -35,11,-73,-17,-40,101,33,17,78,-87,-103,119,49,-14,34,43,116,-23,53,127,-58,-11,20,27,66,29,-22,121,12,32,91,-58,66,84,-18,10,56,43,-32,-91,-68,-2,-27,-81,-29,56,-41,-71, 
  /* [2][0][][] */ 53,60,-33,101,-28,-32,90,83,-89,84,-19,118,79,0,73,-93,-85,-9,40,59,-89,0,112,20,-19,83,75,31,-50,83,56,77,-68,3,-69,-82,-59,104,108,-57,-127,-76,20,-5,-90,120,-26,-51, 
  /* [3][0][][] */ 91,27,56,-2,-62,76,-96,51,62,37,68,21,51,109,82,-22,47,113,-39,32,112,-74,-56,-100,1,-99,-103,127,63,-75,77,14,-76,-12,-4,-24,-74,-23,14,20,-45,-84,-87,12,63,49,-73,-100, 
  /* [4][0][][] */ 55,126,22,71,-13,2,54,23,87,113,25,70,-39,-8,5,-77,-62,11,-35,31,96,-63,104,39,-13,-26,78,-23,-27,48,-33,-46,85,127,3,-69,-21,23,-84,70,-22,-34,-45,-73,62,118,64,76, 
  /* [5][0][][] */ 110,-63,100,104,58,-96,46,70,127,-96,-11,-52,19,118,52,53,25,75,-58,116,40,68,33,-11,-99,-50,-42,-76,66,42,11,-87,-56,24,-59,24,-98,-22,58,21,-100,-35,54,111,-55,38,11,-39, 
  /* [6][0][][] */ 17,-55,123,88,-50,-51,22,82,11,-51,-5,-82,58,72,127,-84,19,-6,18,115,-52,-92,115,78,-60,-82,-17,-54,-3,-104,56,-48,-89,-106,-67,-93,2,36,-108,98,95,78,40,1,-114,95,-99,-58, 
  /* [7][0][][] */ 114,54,-50,-55,-79,102,-32,-8,102,-12,-113,13,72,-101,36,63,127,16,-8,102,52,26,-16,73,-26,116,60,44,-86,116,-28,29,36,13,69,90,-113,74,-19,-39,87,-92,74,61,39,-8,87,-119, 
  /* [8][0][][] */ 1,48,-25,-58,58,7,-49,-14,16,38,57,89,16,-30,-66,-41,-59,87,-53,16,41,-8,84,97,-127,72,48,43,-45,-3,-57,102,89,-9,51,16,109,22,3,82,84,95,-79,-98,11,-36,1,110, 
  /* [9][0][][] */ 8,34,127,63,61,-80,-32,-121,31,34,-19,64,-11,-74,-108,-6,6,15,-95,-48,10,105,-82,-85,50,8,-28,20,2,-94,-91,85,42,22,42,-4,-53,30,-15,-57,26,-71,55,-105,51,8,-104,66, 
  /* [10][0][][] */ -48,113,114,-42,-14,127,122,30,53,46,42,-48,91,99,-27,25,-59,92,-81,-45,-23,43,71,-60,39,69,-124,-81,-33,88,-99,-84,85,121,127,83,-20,29,-16,7,-56,115,-99,-30,-105,-39,-1,-39, 
  /* [11][0][][] */ 102,-6,-6,93,127,46,62,47,119,103,-79,96,-18,-58,43,-52,-62,-105,73,55,42,69,23,-78,-81,-92,-12,63,76,-3,28,1,-73,-77,32,30,-58,59,-38,-38,-20,119,-59,18,-47,-53,-96,-94, 
  /* [12][0][][] */ 14,46,-34,15,96,10,-10,47,-43,71,-34,23,-21,28,59,-44,4,-19,-24,-54,48,6,31,99,-37,-26,125,-83,97,29,-1,117,-42,-54,-33,26,10,-58,18,67,127,53,-79,-17,-20,-55,-29,126, 
  /* [13][0][][] */ 117,-85,107,77,114,127,98,81,92,-78,-10,-42,69,90,85,-45,-123,-85,-52,48,81,-30,102,-24,-50,25,-9,26,-78,-73,78,56,25,78,-42,19,-93,-49,4,83,-60,98,-36,30,-56,38,-22,-50, 
  /* [14][0][][] */ -49,-60,102,83,73,-14,4,-103,-75,-37,84,94,-10,-65,-79,-58,-50,-34,12,29,-30,51,20,57,-123,-41,-15,43,-87,-118,-51,34,109,1,-10,24,108,127,51,-77,16,-98,47,84,81,-91,79,-53, 
  /* [15][0][][] */ 9,-18,-30,46,61,-65,38,-83,35,-11,-64,6,127,-8,-76,-94,63,10,-75,8,32,6,45,71,95,66,23,66,12,50,40,-84,-2,3,-14,-12,-58,75,71,-62,4,74,-46,-26,9,-61,-46,-71, 
  /* [16][0][][] */ -67,31,117,-32,26,127,-52,21,39,34,-116,66,-3,-55,-61,-36,92,81,49,77,100,70,-40,56,-61,68,-82,57,-77,-11,15,-12,-114,94,69,38,-35,37,-39,-80,0,-37,49,70,35,84,67,-6, 
  /* [17][0][][] */ 55,-122,26,75,-42,-87,-67,-76,50,-75,74,45,89,68,-113,40,12,50,112,127,-95,-21,4,-47,75,62,-81,35,105,-20,-43,78,-38,-31,24,-5,-55,90,-100,-39,-105,-22,-23,4,-5,34,62,-126, 
  /* [18][0][][] */ -78,76,110,-39,16,-76,-63,23,20,83,-82,-35,-86,49,71,-27,-22,-27,65,1,101,-24,31,-44,20,-87,-56,110,47,28,14,54,10,-17,-127,-89,-14,35,-52,76,-16,24,-25,9,-113,20,-22,-32, 
  /* [19][0][][] */ 24,69,106,69,69,-54,122,96,127,-27,72,6,-113,60,-43,83,47,-91,124,78,-34,97,-34,32,43,-73,14,-31,-71,-119,-54,44,73,-48,42,17,31,-36,-31,-79,38,-85,-68,14,-55,44,104,-66, 
  /* [20][0][][] */ -24,86,55,79,-99,71,3,43,-1,-5,-88,-10,2,69,26,-69,-16,-50,-79,-46,11,-56,-86,-82,56,-78,-88,25,5,-7,-51,99,119,36,-22,50,28,-33,5,-118,-90,-47,-100,-114,-31,-84,-44,127, 
  /* [21][0][][] */ 105,57,66,-103,80,-45,65,10,-11,-62,-59,53,-12,36,-51,-106,-124,-15,32,-11,94,-50,58,-93,82,-69,-33,100,16,27,-12,-29,-2,12,-90,-115,108,84,-127,-62,-18,-15,21,-13,-79,-49,-90,69, 
  /* [22][0][][] */ 23,-55,-80,-107,89,-63,105,47,-96,89,-76,-114,106,-114,-126,-88,33,75,-121,-69,79,-85,22,23,95,-4,-124,103,-67,-89,-73,-123,41,54,8,1,-1,-21,-72,-118,-1,-18,-9,93,53,-127,86,-34, 
  /* [23][0][][] */ 49,-54,26,70,68,-98,6,-111,34,-88,106,85,22,-101,-3,-22,69,-16,-109,85,78,-56,111,-41,-62,-1,83,20,68,4,81,-57,-21,58,32,48,106,17,-82,4,-84,-17,19,-113,-33,-92,127,44, 
  /* [24][0][][] */ -75,-53,-88,-58,-73,-127,-54,-95,63,114,99,57,71,66,-27,-103,-82,49,30,-60,80,-53,-28,-41,22,-53,86,52,80,38,28,-56,20,12,29,48,-28,-52,80,3,-42,-92,110,10,46,-33,68,88, 
  /* [25][0][][] */ -81,-53,-65,-1,70,-86,-78,5,43,-65,-9,35,45,18,-82,-45,-60,66,40,-127,52,85,9,-87,-26,-71,-64,43,42,-83,53,90,95,-80,35,78,97,-30,-2,5,-49,25,-67,8,104,45,73,48, 
  /* [26][0][][] */ 64,-110,-17,-11,-48,-7,5,11,-65,-75,74,79,-19,-21,31,1,127,44,-36,-32,42,71,89,28,62,61,40,25,24,34,-44,29,5,-54,-50,-56,-35,64,-24,100,-44,92,65,44,-35,64,-12,84, 
  /* [27][0][][] */ -5,22,-63,-98,-113,-62,-68,-23,31,84,56,-71,-17,45,61,-20,73,-4,40,-75,-100,18,-12,-20,-127,40,-48,-5,57,4,-5,-27,102,61,-83,-60,-64,-39,-61,91,-61,17,24,13,113,16,97,121, 
  /* [28][0][][] */ 77,-23,69,28,-126,-80,-109,-79,-39,-108,45,52,-96,-100,-4,88,71,95,-82,60,-40,6,-126,-84,-109,63,-96,-72,-85,-80,-16,-30,-115,-1,63,57,0,-127,-59,32,95,59,-111,70,-115,-18,3,30, 
  /* [29][0][][] */ 73,72,73,-26,-76,10,-95,30,78,-15,-53,-59,127,-77,-24,-24,-77,122,42,-52,-33,-5,76,15,-46,31,-17,-35,-77,1,122,26,70,24,-46,-22,16,120,17,109,69,77,-13,87,29,115,-21,4, 
  /* [30][0][][] */ 20,-38,-32,53,-63,33,-32,-10,118,13,26,-15,-127,38,68,23,-13,45,99,-68,42,-64,-73,30,-86,13,-37,117,9,-85,-52,18,-50,-40,-125,-24,35,10,21,47,99,-42,11,99,117,-23,117,77, 
  /* [31][0][][] */ 81,-104,30,94,46,59,-65,-103,-23,-15,-74,-94,100,-127,-50,106,-20,-96,37,45,60,31,-38,104,52,-116,59,35,-79,-74,48,107,38,14,-98,-13,93,-37,-75,-109,59,-72,-35,30,17,-59,-25,19, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.003069279482588172, 0.0024198901373893023, 0.002616899786517024, 0.0023718171287328005, 0.0024880883283913136, 0.0022827868815511465, 0.0025373958051204681, 0.0023250386584550142, 0.002776159206405282, 0.0025634022895246744, 0.0023937097284942865, 0.0025603363756090403, 0.0026948312297463417, 0.0023993789218366146, 0.0026191058568656445, 0.0030768050346523523, 0.0025237910449504852, 0.0023102771956473589, 0.0027537662535905838, 0.0023207489866763353, 0.0023312554694712162, 0.0024554100818932056, 0.0022680484689772129, 0.0025779567658901215, 0.0026335723232477903, 0.0028561030048877001, 0.0031701908446848392, 0.0026362021453678608, 0.0022811451926827431, 0.0025257025845348835, 0.002709495835006237, 0.0022832604590803385, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 1585, -1142, 3186, 2055, 3434, -38, 1733, 4997, -3107, -1953, -778, 10450, 5240, 3870, 8047, -4647, -2327, 8636, 2419, 6027, 4379, 19791, 17041, 1039, -1811, 1691, -269, -1374, 2309, 1664, 4012, 9553, -711, 289, 12008, 4571, 10353, 2038, 1908, -1025, 3379, -2522, 13535, -214, 390, 2494, -1927, 6191, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00023577034880872816, 0.00027988175861537457, 0.00024634154397062957, 0.00027677995967678726, 0.00015681091463193297, 0.00023095984943211079, 0.00019278599938843399, 0.00015669970889575779, 0.00013356638373807073, 0.00018787381122820079, 0.00033102100132964551, 7.5562922575045377e-05, 0.00012735259952023625, 0.00015713473840150982, 0.00011339577031321824, 0.0001304086617892608, 0.00023572926875203848, 0.00011894774797838181, 0.00025026517687365413, 0.00012981524923816323, 0.00018155291036237031, 5.2094965212745592e-05, 6.0145717725390568e-05, 0.00018587395607028157, 0.00022575384355150163, 0.00015731336316093802, 0.00024272427253890783, 0.00016444869106635451, 0.00017793255392462015, 0.00023361256171483546, 0.00016262537974398583, 9.2423695605248213e-05, 0.00021399144316092134, 0.00026573898503556848, 7.5661242590285838e-05, 0.00012392998905852437, 8.3027203800156713e-05, 0.00029123364947736263, 0.0001914886524900794, 0.00030750955920666456, 0.00017259125888813287, 0.00017213515820913017, 6.3795778260100633e-05, 0.00027086949557997286, 0.00032865404500626028, 0.00022816238924860954, 0.00020539644174277782, 0.00012769733439199626, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -3,20,127,-14,-11,49,-6,-99, 
  /* [1][0][][] */ 77,-42,71,-63,-11,-58,127,9, 
  /* [2][0][][] */ 55,46,64,-64,-67,18,127,-26, 
  /* [3][0][][] */ 13,31,-1,-23,11,-69,127,0, 
  /* [4][0][][] */ 127,-37,-56,-27,-105,-72,-15,68, 
  /* [5][0][][] */ 35,78,127,-6,25,-41,23,-48, 
  /* [6][0][][] */ 127,122,-14,117,-84,21,26,92, 
  /* [7][0][][] */ -17,4,-9,40,26,-127,-111,-46, 
  /* [8][0][][] */ 127,81,-46,83,-67,23,-124,-64, 
  /* [9][0][][] */ 127,-22,-44,50,1,-40,20,-81, 
  /* [10][0][][] */ 64,21,-13,19,-29,127,44,4, 
  /* [11][0][][] */ 127,-30,-1,-127,120,-65,-43,90, 
  /* [12][0][][] */ -58,102,82,-45,17,67,-84,127, 
  /* [13][0][][] */ 127,3,-77,6,21,-73,25,-93, 
  /* [14][0][][] */ 107,37,-6,-12,-127,21,-68,-20, 
  /* [15][0][][] */ 19,-5,-104,-48,-127,-37,104,116, 
  /* [16][0][][] */ -19,-57,116,-19,127,-46,-61,-24, 
  /* [17][0][][] */ 17,-20,81,-7,127,-47,-56,4, 
  /* [18][0][][] */ 127,-35,110,57,-36,32,-42,-12, 
  /* [19][0][][] */ 89,49,59,-76,-35,-127,23,-58, 
  /* [20][0][][] */ 56,-29,45,127,4,-70,-70,70, 
  /* [21][0][][] */ 77,-8,-58,-127,54,-68,13,113, 
  /* [22][0][][] */ -30,-110,-64,-43,38,-43,127,-85, 
  /* [23][0][][] */ -17,13,32,-44,-107,-127,3,-20, 
  /* [24][0][][] */ 127,3,72,44,1,-20,-95,82, 
  /* [25][0][][] */ 71,41,-2,-79,-8,-7,-10,127, 
  /* [26][0][][] */ -86,-32,25,-127,120,5,-42,-91, 
  /* [27][0][][] */ 120,127,-8,-52,14,61,25,2, 
  /* [28][0][][] */ 34,127,-19,12,-10,-61,-22,97, 
  /* [29][0][][] */ 104,13,112,103,64,-30,-127,68, 
  /* [30][0][][] */ 127,-103,-73,97,46,-2,-81,81, 
  /* [31][0][][] */ 95,-90,14,58,-87,-104,-127,62, 
  /* [32][0][][] */ -98,-101,15,-127,111,1,-23,-106, 
  /* [33][0][][] */ 37,14,42,14,43,-71,127,44, 
  /* [34][0][][] */ -72,64,125,-70,127,-65,-47,116, 
  /* [35][0][][] */ -80,11,30,104,9,127,32,-14, 
  /* [36][0][][] */ 87,25,-39,-127,54,-1,34,53, 
  /* [37][0][][] */ 43,48,0,5,-67,127,68,52, 
  /* [38][0][][] */ -31,-55,34,112,5,38,9,127, 
  /* [39][0][][] */ 22,2,-127,46,-11,-29,-19,55, 
  /* [40][0][][] */ 62,16,-105,21,-60,51,-62,127, 
  /* [41][0][][] */ 41,-2,7,-39,-121,-127,-6,-9, 
  /* [42][0][][] */ -101,71,-83,125,-10,91,-30,-127, 
  /* [43][0][][] */ -11,6,-31,-127,-32,1,-6,-90, 
  /* [44][0][][] */ 49,13,11,71,28,127,-39,29, 
  /* [45][0][][] */ 7,84,-28,21,127,-38,-68,-17, 
  /* [46][0][][] */ 68,-82,-7,127,86,42,-40,77, 
  /* [47][0][][] */ -19,-97,36,-3,127,29,56,19, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0034988364204764366, 0.0041534504853188992, 0.0036557130515575409, 0.0041074198670685291, 0.0023270768579095602, 0.0034274484496563673, 0.0028609477449208498, 0.0023254265543073416, 0.0019821275491267443, 0.0027880507986992598, 0.0049123577773571014, 0.0011213552206754684, 0.0018899149727076292, 0.0023318824823945761, 0.0016827953513711691, 0.0019352668896317482, 0.0034982266370207071, 0.0017651867819949985, 0.0037139398045837879, 0.0019264607690274715, 0.0026942484546452761, 0.00077309022890403867, 0.00089256354840472341, 0.0027583730407059193, 0.0033501912839710712, 0.0023345332592725754, 0.003602032782509923, 0.0024404216092079878, 0.0026405223179608583, 0.0034668147563934326, 0.0024133636616170406, 0.0013715693494305015, 0.0031756369862705469, 0.0039435713551938534, 0.0011228142539039254, 0.0018391234334558249, 0.0012321252143010497, 0.00432191276922822, 0.002841695211827755, 0.0045634475536644459, 0.002561257453635335, 0.0025544888339936733, 0.00094673054991289973, 0.0040197083726525307, 0.0048772320151329041, 0.0033859340474009514, 0.0030480870045721531, 0.0018950308440253139, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -12082, -4154, 99, -15807, 882, -1772, 16184, 10537, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00011307711974950507, 0.00020178279373794794, 6.2103303207550198e-05, 0.00011209693184355274, 0.00011749774421332404, 0.00012041020090691745, 8.7043044914025813e-05, 0.00013447135279420763, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-29,33,-23,18,64,16,38,126,-96,52,17,-50,58,14,-55,10,-25,-19,-30,15,-55,7,-30,-53,-29,-35,-45,-33,76,-16,33,27,-45,7,-43,68,-73,-50,5,21,-32,-82,-9,65,-39,54,-37, 
  /* [1][0][][] */ 56,-4,-10,64,46,64,24,36,74,-76,4,1,41,20,-37,-18,-46,-51,-69,-14,0,-57,49,79,1,-54,3,40,-24,54,-51,127,-33,41,-16,-33,-57,-13,-10,-31,-42,-29,-40,40,22,-10,1,-80, 
  /* [2][0][][] */ -40,-40,-76,33,-90,-32,-7,51,-98,-76,-88,-25,-36,45,-127,-11,60,-89,37,-28,112,96,-13,4,50,106,28,-87,-57,-2,73,19,-23,38,74,-70,56,-10,90,93,-33,95,44,-5,-70,60,-53,84, 
  /* [3][0][][] */ 5,-19,-9,38,-31,11,-3,49,83,90,-127,-38,32,-15,-23,82,-56,-22,-12,47,-21,-7,69,27,16,3,-49,55,-31,28,-35,-23,8,34,39,24,58,-3,38,4,-60,84,69,28,36,-10,-31,-48, 
  /* [4][0][][] */ -24,-78,23,-49,9,77,-45,-56,9,-50,64,41,-59,-28,-15,18,63,19,-17,35,-59,-17,109,-25,-88,-25,5,12,18,-20,-3,69,-40,35,-29,43,-41,28,4,27,-42,42,-22,30,127,39,-22,-1, 
  /* [5][0][][] */ -59,-58,47,-127,-12,13,-34,-59,-9,61,-45,72,-70,27,47,13,71,56,63,21,28,5,-10,-58,41,-79,7,-41,-16,-31,30,-72,1,-36,55,3,-26,26,41,55,86,18,17,-18,-8,-5,-34,32, 
  /* [6][0][][] */ -67,-62,38,37,-62,-69,17,-62,-104,24,-127,58,11,-69,57,11,-49,19,35,123,-31,-3,86,43,-102,-11,76,16,31,-27,-45,-57,-52,54,63,-125,-43,90,69,-34,-69,48,90,-82,-1,-71,-48,22, 
  /* [7][0][][] */ 20,2,16,-16,16,19,-41,-41,-127,-33,93,33,10,-25,26,6,17,45,4,-16,-38,19,-11,-40,34,-2,-37,13,-12,-20,-28,-37,-90,-45,-33,14,52,-34,-19,-1,52,11,48,-18,20,-39,35,25, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0059129730798304081, 0.010551527142524719, 0.0032474754843860865, 0.0058617177419364452, 0.0061441343277692795, 0.0062964311800897121, 0.0045516123063862324, 0.0070317098870873451, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -3035, -1156, 8470, 1209, -1115, -4393, -2497, 10313, 6761, -2255, -5421, -4611, 1094, 7885, 8383, 258, 4914, -4741, 5629, -1705, 13550, -2503, -1818, -1139, 3521, -3108, 355, -2067, 8128, -16986, -1846, -405, -2374, -1275, -189, -1716, 7623, -5696, 1261, -11174, -1617, 4703, -4839, -2184, 2317, -4034, 8013, -2381, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00023040815722197294, 0.0002453905763104558, 0.00011815504694823176, 0.00012570068065542728, 0.00018193264259025455, 0.00021284051763359457, 0.00021935478434897959, 0.00014607253251597285, 0.00016495048475917429, 0.00068054813891649246, 0.00031199763179756701, 8.9879344159271568e-05, 0.00031389686046168208, 0.00012432805669959635, 0.00014717796875629574, 0.00021579857275355607, 0.00014456875214818865, 0.00013258580293040723, 0.00012493868416640908, 0.00030892292852513492, 9.8766424343921244e-05, 0.00024306458362843841, 0.00019008638628292829, 0.00018503268074709922, 0.00023300971952266991, 0.00041766278445720673, 0.00025384669424965978, 0.00036974649992771447, 0.00011820922372862697, 0.00016018380119930953, 0.00019434945716056973, 0.00016365970077458769, 8.8132539531216025e-05, 0.00033936827094294131, 0.00014142881263978779, 0.00021525731426663697, 0.000185164506547153, 0.00010852372361114249, 6.4639221818652004e-05, 0.00010785819176817313, 0.00025075432495214045, 0.00014580535935238004, 0.00023063978005666286, 0.00012167831300757825, 0.00018348520097788423, 7.8372853749897331e-05, 0.00017136032693088055, 0.00022803731553722173, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 77,68,-34,47,0,-9,-49,12,40,-92,37,23,5,-83,-29,32,127,21,-79,6,105,35,-15,-23,67,13,21,-5,-69,21,-19,-58,127,10,91,32,-32,27,113,31,-74,91,-103,-67,19,-96,-37,17, 103,127,-63,107,26,44,-77,-127,55,17,127,53,-27,-3,-16,-4,-55,127,-100,27,69,127,49,-30,18,-2,6,127,-127,85,-33,-127,-20,-31,42,74,-71,127,127,24,-127,-73,70,0,1,15,-127,127, 51,32,-24,41,6,-2,-33,22,35,-109,30,8,-1,-53,-36,-28,120,-41,-41,-4,93,23,-21,39,55,42,17,-11,-27,-5,-27,-34,123,14,85,13,-11,45,107,-17,-47,86,45,75,22,79,13,-30, 
  /* [0][1][][] */ -16,-26,-124,93,21,51,74,-26,36,36,-40,127,127,14,-34,-71,-29,100,72,-14,-119,21,29,-103,32,51,16,15,-2,91,17,53,49,127,22,55,-99,24,-58,127,76,10,82,-124,17,-103,-19,127, 59,-63,-50,-127,127,3,127,-75,-127,102,8,86,-114,127,127,-13,-125,112,10,127,25,-18,127,-4,-127,127,27,-69,-88,54,-127,104,76,-94,16,127,127,90,-13,123,103,-76,-12,9,121,-56,-10,17, -11,-30,-127,65,-18,127,60,-26,37,15,-37,54,-23,24,-47,-23,-68,88,127,-39,-127,12,-76,127,12,23,20,29,56,65,33,41,14,-6,-42,-76,-62,2,-2,25,34,69,-18,127,-6,127,-40,77, 
  /* [0][2][][] */ -35,-21,-19,26,-23,11,-20,6,33,-3,11,-11,30,-63,-38,32,110,5,22,6,-66,18,11,-7,27,-3,-9,-5,-14,17,30,2,35,8,127,-6,-11,79,77,86,25,94,127,-26,-58,-123,-13,-41, -127,8,-84,50,-124,-12,-73,-21,31,127,-66,54,-32,-29,-14,127,-84,32,-104,-37,-83,23,13,-29,-22,61,-127,-28,-60,127,52,21,26,-27,31,39,-25,41,-54,57,-53,-127,-94,-19,-127,67,-108,108, -31,-33,-28,24,-1,7,-7,5,26,-34,-1,-37,-17,-52,-31,-1,116,-48,102,15,-60,-20,6,32,28,-18,-9,-13,-10,6,26,7,55,5,88,11,-3,78,111,35,24,86,-59,59,-34,123,-15,-72, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0097923465073108673, 0.010429099202156067, 0.0050215893425047398, 0.0053422790952026844, 0.007732137106359005, 0.0090457219630479813, 0.0093225780874490738, 0.0062080826610326767, 0.007010395172983408, 0.028923295438289642, 0.013259898871183395, 0.0038198721595108509, 0.013340616598725319, 0.0052839424461126328, 0.0062550636939704418, 0.0091714393347501755, 0.0061441720463335514, 0.005634896457195282, 0.0053098942153155804, 0.013129224069416523, 0.0041975728236138821, 0.010330244898796082, 0.0080786710605025291, 0.0078638885170221329, 0.0099029131233692169, 0.017750667408108711, 0.01078848447650671, 0.015714226290583611, 0.0050238920375704765, 0.0068078115582466125, 0.008259851485490799, 0.0069555370137095451, 0.0037456327117979527, 0.01442315150052309, 0.0060107242316007614, 0.0091484356671571732, 0.0078694913536310196, 0.0046122581698000431, 0.0027471669018268585, 0.0045839729718863964, 0.010657058097422123, 0.0061967275105416775, 0.0098021905869245529, 0.005171328317373991, 0.0077981208451092243, 0.0033308460842818022, 0.0072828135453164577, 0.0096915857866406441, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 29790, 5391, 1353, 1212, 4310, 2594, 6480, 3362, 3250, -6080, 15860, 998, 9330, 1910, 3520, 1820, 5475, -646, 7709, 492, 3124, -553, 3121, 5438, 1829, -2894, 2477, 10363, 898, 7034, 1845, 9506, 395, 4206, -991, -1393, 2624, 2637, 158, 1120, 10335, -748, 10649, 3417, 1368, 4928, 4395, -1349, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 3.6803474358748645e-05, 0.0001448225521016866, 0.00017490946629550308, 0.00020522362319752574, 0.00018336524954065681, 0.00019160141528118402, 0.00012286928540561348, 0.00019190601597074419, 0.00014413800090551376, 0.00011854775948449969, 6.5245716541539878e-05, 0.00021598882449325174, 8.9682842371985316e-05, 0.0002095815580105409, 0.00018048267520498484, 0.00018412931240163743, 0.00012877861445304006, 0.00026775337755680084, 0.00011853566684294492, 0.00018626022210810333, 0.0001984233531402424, 0.00015429551422130316, 0.00019123335368931293, 0.00013513476005755365, 0.00021799451496917754, 0.00021414816728793085, 0.00018956384155899286, 9.4260140031110495e-05, 0.00020807543478440493, 0.00011063680722145364, 0.00019737823458854109, 0.00010332466627005488, 0.00021453142107930034, 0.00018317115609534085, 0.00014434498734772205, 0.00025655646459199488, 0.00021844975708518177, 0.00014266626385506243, 0.00025254438514821231, 0.00023012504971120507, 8.7899483332876116e-05, 0.00020480618695728481, 7.9650264524389058e-05, 0.00013128457067068666, 0.00020595290698111057, 0.00016231814515776932, 0.0001393947604810819, 0.00023375928867608309, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,53,-7,-5,55,28,19,-45, 
  /* [1][0][][] */ 5,-58,-25,-22,-68,-127,-3,20, 
  /* [2][0][][] */ -65,75,-1,-63,-57,42,-75,127, 
  /* [3][0][][] */ 64,37,52,-14,-62,-127,41,-22, 
  /* [4][0][][] */ 24,37,-127,16,-117,83,20,29, 
  /* [5][0][][] */ -20,51,24,-28,-77,-127,-50,-15, 
  /* [6][0][][] */ -61,127,108,-36,-64,-34,11,-57, 
  /* [7][0][][] */ -18,-10,43,61,10,-127,-7,70, 
  /* [8][0][][] */ 127,22,-87,97,-88,-63,-110,3, 
  /* [9][0][][] */ 113,-30,-64,-81,-4,-37,-56,127, 
  /* [10][0][][] */ -104,14,22,127,15,89,23,-98, 
  /* [11][0][][] */ 22,22,45,-11,8,110,127,80, 
  /* [12][0][][] */ -104,-120,-51,-88,127,-45,-5,65, 
  /* [13][0][][] */ -36,-9,-12,33,24,-127,30,58, 
  /* [14][0][][] */ 79,83,105,26,52,-127,-101,-39, 
  /* [15][0][][] */ -36,78,127,57,2,23,53,-82, 
  /* [16][0][][] */ -94,-63,33,-88,127,-8,-74,-20, 
  /* [17][0][][] */ 43,-39,-54,10,-14,127,-18,30, 
  /* [18][0][][] */ -6,127,65,-45,-64,62,82,-80, 
  /* [19][0][][] */ 14,91,80,127,-37,31,36,29, 
  /* [20][0][][] */ 11,13,75,-127,-75,2,69,-26, 
  /* [21][0][][] */ -97,69,28,-127,110,53,123,10, 
  /* [22][0][][] */ 84,-40,-88,57,56,-41,-65,127, 
  /* [23][0][][] */ 30,-74,-127,-31,57,-17,-62,92, 
  /* [24][0][][] */ 28,-16,-76,4,-41,44,-127,94, 
  /* [25][0][][] */ -8,-12,66,18,127,-6,-99,-55, 
  /* [26][0][][] */ 14,110,127,-20,-47,-27,71,-77, 
  /* [27][0][][] */ -47,30,127,-65,7,23,76,-109, 
  /* [28][0][][] */ 60,-9,83,127,62,-35,39,97, 
  /* [29][0][][] */ 56,63,98,13,-49,40,-127,94, 
  /* [30][0][][] */ 47,1,-75,53,-127,-45,-28,66, 
  /* [31][0][][] */ 13,113,108,-81,-59,35,102,-127, 
  /* [32][0][][] */ 46,-8,-2,25,96,127,21,-36, 
  /* [33][0][][] */ 9,-31,-127,10,21,-20,-45,83, 
  /* [34][0][][] */ 28,-56,28,-127,-12,82,-28,2, 
  /* [35][0][][] */ -21,37,92,-6,22,-127,8,-25, 
  /* [36][0][][] */ -6,17,-33,-127,-17,13,12,-46, 
  /* [37][0][][] */ 55,-18,-17,-92,-74,127,-68,-68, 
  /* [38][0][][] */ 78,-69,-30,90,60,33,-37,127, 
  /* [39][0][][] */ 127,96,34,70,-1,107,-50,4, 
  /* [40][0][][] */ 30,-121,-127,-20,8,-1,-40,99, 
  /* [41][0][][] */ 4,-71,-127,-102,-8,-72,-44,-27, 
  /* [42][0][][] */ 63,117,77,127,-108,-20,14,33, 
  /* [43][0][][] */ 113,-42,-92,-127,-49,-29,36,86, 
  /* [44][0][][] */ -1,85,127,-95,-79,-1,89,-110, 
  /* [45][0][][] */ 51,11,-127,57,-32,43,26,77, 
  /* [46][0][][] */ 38,-39,-62,-127,24,-22,-42,54, 
  /* [47][0][][] */ 67,-102,127,-52,80,-20,15,8, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00061366037698462605, 0.0024147683288902044, 0.0029164368752390146, 0.0034218945074826479, 0.0030574286356568336, 0.003194758202880621, 0.0020487199071794748, 0.0031998371705412865, 0.0024033542722463608, 0.001976663013920188, 0.0010879058390855789, 0.0036013934295624495, 0.0014953699428588152, 0.0034945586230605841, 0.0030093644745647907, 0.0030701684299856424, 0.0021472519729286432, 0.0044645145535469055, 0.0019764613825827837, 0.0031056993175297976, 0.0033085071481764317, 0.0025727204047143459, 0.0031886210199445486, 0.0022532343864440918, 0.0036348362918943167, 0.0035707021597772837, 0.003160783788189292, 0.0015716917114332318, 0.0034694457426667213, 0.0018447559559717774, 0.0032910807058215141, 0.0017228333745151758, 0.0035770926624536514, 0.0030541922897100449, 0.0024068055208772421, 0.0042778174392879009, 0.0036424268037080765, 0.0023788143880665302, 0.0042109200730919838, 0.003837100462988019, 0.0014656342100352049, 0.0034149342682212591, 0.0013280869461596012, 0.002189036225900054, 0.0034340545535087585, 0.0027064895257353783, 0.0023242654278874397, 0.0038976976647973061, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -14588, -40216, 1521, 8328, -15916, 2083, -26456, -1595, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00014565208402927965, 6.0456030041677877e-05, 7.1177528297994286e-05, 6.5132873714901507e-05, 7.1346446929965168e-05, 6.2410930695477873e-05, 6.5627595176920295e-05, 7.7791664807591587e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 44,50,-86,60,18,29,-92,-33,14,-19,-5,-35,-14,-4,40,0,59,-25,44,-18,19,-44,50,-4,13,-36,-16,14,-18,3,-22,8,51,15,14,16,127,62,41,-33,0,-18,-9,-30,85,29,18,-48, 
  /* [1][0][][] */ 59,20,19,3,26,105,-9,-11,22,55,-44,-82,106,-12,16,53,34,29,25,-100,127,-37,51,56,42,37,43,13,39,-75,64,76,56,108,19,113,83,43,17,22,94,4,34,47,32,49,118,-84, 
  /* [2][0][][] */ -17,22,81,127,-60,37,-9,56,21,60,18,-71,-45,106,32,45,-73,-85,70,14,-8,54,-58,-79,-27,-41,29,-20,-98,23,5,2,-35,-17,-86,-34,16,40,-76,-23,-15,-67,-42,30,66,-84,-23,20, 
  /* [3][0][][] */ -32,52,-81,-6,29,-92,-3,72,119,-95,-56,18,-2,-15,16,65,31,6,-6,-30,-11,35,-83,50,-21,-22,46,-15,69,-31,42,-64,33,-9,-28,-58,-127,-11,-77,20,-18,-63,50,-13,-62,25,-5,-36, 
  /* [4][0][][] */ 61,-13,23,-19,-57,72,16,60,-123,-55,62,51,85,-55,-65,-59,93,68,58,-19,11,-81,-27,36,-40,0,-53,-127,-66,-52,79,43,83,11,103,98,57,60,43,37,3,41,-61,-41,76,64,86,-53, 
  /* [5][0][][] */ 43,91,7,108,27,21,-55,-99,-113,24,-3,9,39,61,34,-70,82,119,-24,44,-24,-62,-28,-83,-118,-96,-46,57,-11,51,-35,46,-8,-84,72,12,-50,127,-48,-122,-8,-34,-16,-54,-13,-10,-45,110, 
  /* [6][0][][] */ 107,61,-1,127,-96,32,26,67,14,-96,71,80,67,-40,-29,-48,66,32,-80,34,73,-38,-10,-11,2,55,-31,-46,20,-48,63,66,11,-55,-14,92,88,-73,6,6,-93,63,-110,47,66,93,92,-49, 
  /* [7][0][][] */ 27,24,127,45,-37,52,-97,4,-39,97,3,-4,56,54,12,-1,-61,-4,-54,18,-16,49,-6,-39,-8,43,53,-15,2,4,17,-5,-93,-12,63,42,93,-9,41,-11,-12,-37,-36,-57,-2,-26,15,31, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0070755123160779476, 0.0029368435498327017, 0.003457674290984869, 0.0031640361994504929, 0.003465880174189806, 0.0030318091157823801, 0.0031880687456578016, 0.0037789768539369106, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 12163, -17544, -871, 2275, -1618, 14839, 5231, -1734, -9509, 4601, -3068, -3833, -11186, -13232, 6290, -475, -8963, 25802, -2218, -13000, 14585, -900, 685, -352, 156, 99, -2947, -2918, -1597, 4062, 622, 22207, 17017, 503, 4686, 19944, -1180, 20803, 714, 1553, -3102, -8220, -509, 3691, 5530, 17364, 12201, -5332, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 9.1875539510510862e-05, 0.00010190352622885257, 0.0010523984674364328, 0.00021080720762256533, 0.000147565922816284, 0.00015793234342709184, 9.8377822723705322e-05, 0.00035217791446484625, 8.4946586866863072e-05, 0.00024150304670911282, 0.00020495809440035373, 8.7666827312204987e-05, 9.481819870416075e-05, 8.5220177425071597e-05, 0.00010186839790549129, 0.00012150427210144699, 6.7849054175894707e-05, 6.9678608269896358e-05, 0.00026055876514874399, 6.8340232246555388e-05, 9.0335292043164372e-05, 0.00035884336102753878, 0.00019056856399402022, 0.00016874416905920953, 0.00016365766350645572, 0.0001981365930987522, 0.00017564713198225945, 0.00019991067529190332, 0.00022332988737616688, 0.00019145126861985773, 0.00012769480235874653, 9.100858005695045e-05, 0.00012478815915528685, 0.00019045617955271155, 0.00010543192183831707, 0.00012560668983496726, 0.00037670644815079868, 0.00010267319157719612, 0.00011476587678771466, 0.00031087300158105791, 0.00012386981688905507, 0.00014304765500128269, 0.00017006293637678027, 0.00012673638411797583, 0.00015704888210166246, 9.2176705948077142e-05, 0.00012571424304042011, 0.00015653800801374018, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -53,10,42,15,127,-65,24,11,13,23,23,-7,23,11,-89,0,77,-16,-24,77,-31,3,-45,-4,-27,6,23,-34,-22,127,2,-108,-53,102,126,-78,13,-71,-127,-30,10,-13,-9,-73,-11,-19,-127,19, -46,94,-7,39,-6,-89,119,-16,88,9,34,127,79,127,-36,19,84,-99,1,98,-18,-28,127,-127,-7,53,-116,31,-23,-103,85,-112,-127,-87,22,-31,-63,-44,-110,9,-54,-20,24,-127,16,-61,18,60, -38,-8,11,0,51,-73,15,0,15,19,25,-40,4,-2,-83,17,89,-7,-23,56,-21,2,-60,0,23,2,23,-98,-31,45,-63,-127,-5,-18,110,-65,15,-42,-89,-1,18,2,7,-64,-21,-67,-118,-10, 
  /* [0][1][][] */ -127,110,-18,-65,0,-72,4,-9,29,13,42,48,102,107,-75,51,127,-92,13,105,-38,-58,-105,-30,-127,-15,-40,18,-3,-9,73,-66,-93,127,-112,-101,40,-96,42,61,-98,22,-86,55,-20,-100,33,-46, -8,127,127,127,-27,71,-127,127,127,-127,-53,71,127,115,127,-76,-63,-127,127,20,-127,127,111,4,99,108,71,127,127,-94,127,2,-70,-93,-21,-127,127,127,94,55,-71,127,-24,86,127,61,-31,-111, -85,58,-43,-59,-57,-119,8,-27,0,2,123,42,40,117,-61,127,125,-91,-13,77,18,-71,-108,-35,34,-20,-38,18,0,8,100,-49,-45,-39,-127,-69,25,-109,52,-127,-68,24,127,62,-35,-127,15,127, 
  /* [0][2][][] */ 10,-6,8,-2,24,-49,33,0,57,23,127,45,19,-18,-55,91,65,-41,-54,-5,-27,3,-60,52,-18,-24,-35,-25,7,71,-4,-41,-46,35,-81,2,-46,-70,42,-37,91,-6,-16,-6,-33,27,3,-39, -63,101,10,28,-94,-127,84,-79,87,21,79,-47,-19,20,-68,95,66,-17,-13,127,-29,14,95,120,3,-127,127,12,13,-47,-50,-108,-17,-55,-88,-116,-75,-64,22,26,127,59,-47,36,-34,-95,-115,-13, 65,-4,23,1,-16,-42,17,10,57,20,118,30,33,-6,-49,68,41,-34,-64,-8,-32,0,-67,42,13,-23,-34,-68,2,-6,-19,-23,-26,-8,-36,27,-37,-54,54,-6,62,1,28,-8,-28,-32,29,25, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0048310579732060432, 0.0053583560511469841, 0.05533788725733757, 0.011084798723459244, 0.0077594048343598843, 0.008304499089717865, 0.0051729651167988777, 0.018518442288041115, 0.0044667152687907219, 0.012698866426944733, 0.010777236893773079, 0.0046097529120743275, 0.0049857906997203827, 0.0044811014086008072, 0.0053565087728202343, 0.0063890148885548115, 0.0035676821134984493, 0.0036638849414885044, 0.01370086707174778, 0.0035935095511376858, 0.0047500678338110447, 0.018868928775191307, 0.010020596906542778, 0.0088730128481984138, 0.0086055509746074677, 0.01041854452341795, 0.0092359893023967743, 0.010511830449104309, 0.011743273586034775, 0.010067012161016464, 0.0067145288921892643, 0.0047854711301624775, 0.0065616904757916927, 0.010014687664806843, 0.0055438880808651447, 0.0066047306172549725, 0.019808217883110046, 0.005398827139288187, 0.0060346922837197781, 0.0163465216755867, 0.0065134014002978802, 0.0075218225829303265, 0.0089423572644591331, 0.0066641331650316715, 0.0082580437883734703, 0.0048468941822648048, 0.006610386073589325, 0.0082311807200312614, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 501, 6206, -6007, 4847, 2126, 7206, 4280, 16294, 7122, 5545, -2557, -32, 1503, 4406, 2611, -1456, 183, 6180, 10272, 337, 2294, 10305, 2947, 7861, 11028, 9905, 1410, 8669, 2154, 6742, -2520, 13621, 1822, 8891, 5109, 5637, 133356, 9348, 5654, 18510, 2548, 1038, 4779, 1526, 3557, 1917, 2193, 3280, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00029569098842330277, 0.0001220846752403304, 0.00013249136100057513, 0.00013022677740082145, 0.00021656444005202502, 9.5955416327342391e-05, 0.00013061772915534675, 6.0366597608663142e-05, 0.00012043236347381026, 0.0001300373551202938, 0.00013882773055229336, 0.00016464144573546946, 0.00016875789151526988, 0.00014274315617512912, 0.00020561405108310282, 0.00011903169797733426, 0.00016214561765082181, 0.00011170320794917643, 9.4863527920097113e-05, 0.00019008776871487498, 0.0001890087005449459, 8.3499478932935745e-05, 0.00017677554569672793, 9.2792288342025131e-05, 8.0440389865543693e-05, 9.5626084657851607e-05, 0.0001979280641535297, 0.00010532305896049365, 0.00011405171972000971, 0.00012242705270182341, 0.00019678444368764758, 6.1143706261646003e-05, 0.00022281522979028523, 8.6945990915410221e-05, 0.00012373211211524904, 0.00013942204532213509, 1.1982697287749033e-05, 9.7678610472939909e-05, 0.00010571185703156516, 5.6295299145858735e-05, 0.0001518016797490418, 0.00022415316198021173, 0.00015102565521374345, 0.00012885822798125446, 0.00018972020188812166, 0.0001360199530608952, 0.00017338768520858139, 0.0001051141953212209, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -82,-127,-27,22,-40,-9,45,-38, 
  /* [1][0][][] */ -6,127,37,-78,4,-91,-61,83, 
  /* [2][0][][] */ -127,-61,44,10,72,10,25,-11, 
  /* [3][0][][] */ 5,-43,-127,-60,40,-57,-36,65, 
  /* [4][0][][] */ -41,-103,111,-9,127,-60,61,17, 
  /* [5][0][][] */ -23,74,69,-96,100,51,-55,127, 
  /* [6][0][][] */ -127,94,63,61,-54,7,35,-110, 
  /* [7][0][][] */ 42,-24,56,26,41,-127,-1,115, 
  /* [8][0][][] */ -5,63,-7,-33,14,110,127,-76, 
  /* [9][0][][] */ 90,127,16,-74,-105,-57,-69,113, 
  /* [10][0][][] */ 34,-13,37,4,-28,42,-127,-73, 
  /* [11][0][][] */ -68,20,-117,-72,127,19,45,62, 
  /* [12][0][][] */ 87,29,-32,-12,127,92,6,4, 
  /* [13][0][][] */ -127,-118,-2,49,-93,47,61,8, 
  /* [14][0][][] */ -17,101,-79,117,-54,127,-22,38, 
  /* [15][0][][] */ -25,-78,-28,-96,127,66,-33,63, 
  /* [16][0][][] */ 78,-90,-6,51,51,-21,40,-127, 
  /* [17][0][][] */ -77,-86,-127,103,8,102,72,-109, 
  /* [18][0][][] */ 71,-15,127,5,-33,-102,-82,-33, 
  /* [19][0][][] */ -34,127,40,24,107,-113,-79,-28, 
  /* [20][0][][] */ -83,-18,-127,-53,37,1,-13,1, 
  /* [21][0][][] */ -107,-31,26,74,-84,-104,127,-58, 
  /* [22][0][][] */ 62,-19,-127,-68,-33,-4,-10,42, 
  /* [23][0][][] */ -23,37,127,-16,-117,32,-2,-119, 
  /* [24][0][][] */ -65,74,56,83,127,78,12,-32, 
  /* [25][0][][] */ -53,-127,-63,25,-63,35,39,4, 
  /* [26][0][][] */ 93,112,-104,-51,-127,-41,-52,36, 
  /* [27][0][][] */ 74,45,-79,22,-127,15,-37,-27, 
  /* [28][0][][] */ -40,48,21,-89,71,82,-127,-88, 
  /* [29][0][][] */ 47,-16,-8,-98,-127,7,11,-67, 
  /* [30][0][][] */ -100,-9,40,127,42,25,-47,-32, 
  /* [31][0][][] */ 1,-117,10,-88,-127,71,-69,-96, 
  /* [32][0][][] */ -127,-3,32,-10,13,-24,-5,22, 
  /* [33][0][][] */ 39,-74,-116,-127,-13,14,-69,23, 
  /* [34][0][][] */ 33,92,127,-13,-106,-47,60,-70, 
  /* [35][0][][] */ 88,17,25,2,-104,-32,-127,-40, 
  /* [36][0][][] */ 127,19,78,-42,5,-28,76,71, 
  /* [37][0][][] */ 112,112,2,-17,68,88,-127,49, 
  /* [38][0][][] */ -53,83,115,127,-29,81,19,-72, 
  /* [39][0][][] */ 25,42,127,-42,87,-39,-36,17, 
  /* [40][0][][] */ 64,29,39,-9,-62,-127,38,-35, 
  /* [41][0][][] */ 32,-41,20,127,-30,65,10,71, 
  /* [42][0][][] */ -27,-93,76,-40,127,-31,98,25, 
  /* [43][0][][] */ -29,-53,-94,-33,122,63,-101,127, 
  /* [44][0][][] */ 101,-18,127,-14,9,25,-44,12, 
  /* [45][0][][] */ -49,11,42,-48,-101,-127,-37,126, 
  /* [46][0][][] */ -78,79,97,22,-14,-14,35,-127, 
  /* [47][0][][] */ 48,-32,5,127,-20,-119,76,61, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0060866405256092548, 0.0025130477733910084, 0.0027272636070847511, 0.0026806483510881662, 0.0044578630477190018, 0.0019751908257603645, 0.0026886961422860622, 0.0012426141183823347, 0.0024790356401354074, 0.0026767493691295385, 0.0028576944023370743, 0.0033890560735017061, 0.0034737908281385899, 0.0029382912907749414, 0.0042324550449848175, 0.0024502037558704615, 0.0033376808278262615, 0.0022993506863713264, 0.0019527149852365255, 0.003912854939699173, 0.0038906428962945938, 0.0017187920166179538, 0.0036388298030942678, 0.0019100796198472381, 0.0016558223869651556, 0.0019684117287397385, 0.0040742433629930019, 0.0021680188365280628, 0.0023476935457438231, 0.0025200953241437674, 0.0040507023222744465, 0.0012586103985086083, 0.0045865322463214397, 0.0017897366778925061, 0.0025469593238085508, 0.0028699282556772232, 0.0002466574078425765, 0.0020106618758291006, 0.0021760219242423773, 0.0011588085908442736, 0.0031247562728822231, 0.0046140728518366814, 0.0031087822280824184, 0.0026524774730205536, 0.0039052888751029968, 0.0027998979203402996, 0.0035690926015377045, 0.0021637193858623505, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 5722, -53, 14173, -8519, -13206, -14591, -5922, -2027, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 8.8858432718552649e-05, 0.00011983751028310508, 9.0772082330659032e-05, 0.00013130750448908657, 0.00015846363385207951, 9.2706242867279798e-05, 0.00015621983038727194, 0.00025347858900204301, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -13,-31,44,-53,48,81,67,88,100,-40,-25,57,-32,-21,7,-20,42,37,14,-51,-30,15,-80,-40,28,-16,17,-67,-31,19,38,23,26,42,59,14,123,-55,-78,3,-59,-68,-34,-3,-62,-90,-127,57, 
  /* [1][0][][] */ -9,-5,-44,46,-3,15,-46,-16,-56,20,12,81,-33,-2,-29,127,34,53,15,-26,-38,-24,-61,21,7,-10,-17,-87,41,-14,-62,-66,58,-32,-37,-56,32,37,47,-45,6,70,50,-44,5,-40,-50,-24, 
  /* [2][0][][] */ 10,-76,-33,0,-38,17,-2,4,115,15,-6,-15,-32,-81,38,10,0,-71,-17,-1,-99,51,8,35,5,46,-43,-26,-20,-36,32,-49,-108,31,-52,58,-69,68,-20,-20,127,-17,-7,44,33,49,-61,-42, 
  /* [3][0][][] */ -29,-111,96,57,21,-106,-16,-13,-127,120,63,-48,51,9,-21,25,54,36,-22,48,73,88,34,-61,10,88,62,30,-31,-73,7,12,-26,4,50,7,-20,-80,-32,46,-22,-7,24,-71,-85,20,-2,30, 
  /* [4][0][][] */ -14,59,-13,80,32,7,15,-5,-58,85,58,72,-2,28,65,21,6,-111,-13,-8,87,-16,-103,56,71,-28,25,30,53,27,-9,-51,-51,127,5,21,67,-24,25,21,-26,50,-1,-30,1,-58,-37,17, 
  /* [5][0][][] */ -18,6,-6,-68,-120,25,126,20,5,62,-22,-27,-104,-1,63,-38,-92,37,-64,-78,-7,105,-6,32,108,33,-14,20,-20,-10,127,-56,-15,101,80,84,-20,58,93,34,-28,-34,-25,36,-64,51,21,50, 
  /* [6][0][][] */ 1,-27,-15,24,-50,-50,10,1,21,-9,39,5,-55,-29,32,52,8,-58,3,-60,71,-26,-2,-28,3,-5,7,35,41,3,7,127,43,-13,-17,27,6,-12,15,10,-4,33,-26,-47,-2,-22,-24,34, 
  /* [7][0][][] */ -29,-15,-43,-2,6,-24,6,11,38,3,24,-2,-8,14,4,0,30,-6,0,-2,-61,11,5,-28,-1,-4,-56,-10,-13,-14,20,31,18,-10,29,13,-20,127,-11,-43,-37,2,-42,-33,23,60,-72,-15, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0037764834705740213, 0.0050930939614772797, 0.0038578135427087545, 0.0055805686861276627, 0.0067347045987844467, 0.0039400150999426842, 0.0066393427550792694, 0.010772840119898319, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -588, 34283, 32254, -2008, -1030, -16743, 22742, 18420, -13853, 1869, -1736, 20285, 22209, -19075, -15347, -2697, -16, 36041, -1115, -1838, 54595, 17992, -11445, -6763, 20260, 15039, -3008, -2270, -4711, 59, 31229, 875, -3181, 13901, 16442, 22939, -5424, 59254, -6056, -2364, 31909, -37, -5073, 19902, -856, -2151, -10819, 16377, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00029828850529156625, 7.4287090683355927e-05, 0.00011571099457796663, 8.75784971867688e-05, 5.8983485359931365e-05, 9.8842996521852911e-05, 0.00014919103705324233, 7.1779555582907051e-05, 0.00021024653688073158, 5.2962222980568185e-05, 0.00011684426135616377, 9.9331875389907509e-05, 8.1778976891655475e-05, 0.00014334985462483019, 6.1371887568384409e-05, 6.1191429267637432e-05, 5.3444069635588676e-05, 0.00014202381134964526, 0.00039388929144479334, 5.6621098337927833e-05, 4.4188007450429723e-05, 6.1934064433444291e-05, 9.3513270257972181e-05, 0.00013766583288088441, 6.6893197072204202e-05, 7.74858781369403e-05, 0.00014985317829996347, 0.00013992213644087315, 8.984997111838311e-05, 0.00014730979455634952, 0.00014819846546743065, 6.6637374402489513e-05, 4.2402418330311775e-05, 7.6771699241362512e-05, 8.119869016809389e-05, 6.8236506194807589e-05, 7.5005635153502226e-05, 5.6548567954450846e-05, 8.427302964264527e-05, 9.5887720817700028e-05, 8.7629749032203108e-05, 0.00017268674855586141, 7.4506140663288534e-05, 7.3497991252224892e-05, 0.00015686773986089975, 0.00013471773127093911, 0.00017683269106782973, 0.00013702045544050634, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 53,-80,-39,45,64,45,-62,-92,5,50,127,-55,-28,77,119,50,72,-94,49,65,-81,-98,38,72,-53,-20,74,79,76,102,-53,84,53,-78,-113,-99,91,-57,65,13,-86,49,54,-82,77,112,67,-82, 77,-81,-84,68,85,47,-64,-86,21,72,126,-91,-50,98,127,78,69,-111,44,99,-71,-125,60,90,-81,-48,111,98,103,127,-61,97,74,-127,-127,-97,103,-84,70,38,-123,59,54,-100,101,127,82,-90, 41,-37,-67,27,23,3,-17,-26,13,30,46,-41,-47,48,67,38,25,-31,15,45,-8,-122,29,44,-45,-14,38,46,38,64,-22,19,41,-96,-95,-95,37,-46,11,19,-55,32,25,-51,62,41,19,-46, 
  /* [0][1][][] */ 46,-110,-60,91,101,83,-121,-116,89,89,108,-88,-93,98,119,86,118,-103,53,120,-104,-98,82,101,-116,-88,109,110,109,95,-99,106,103,-120,-105,-127,92,-105,123,76,-93,94,107,-125,87,107,51,-87, 50,-127,-127,127,127,127,-127,-127,127,127,115,-127,-127,127,107,127,127,-127,62,127,-127,-127,127,127,-127,-127,127,127,127,109,-127,127,127,-124,-89,-123,127,-127,127,116,-127,127,127,-127,127,110,66,-127, -5,-62,-103,55,62,34,-58,-40,58,54,39,-73,-92,42,48,71,43,-29,29,58,-29,-100,61,73,-67,-12,36,69,61,10,-43,28,53,-121,-74,-52,40,-60,28,49,-44,97,40,-74,60,-3,17,-60, 
  /* [0][2][][] */ -52,-67,-53,61,44,57,-37,3,-89,40,26,-56,-69,53,83,47,61,-39,-86,72,-31,-64,45,31,-87,-64,58,47,33,0,-47,25,68,-70,-18,-93,47,-55,66,89,-21,76,59,-49,54,11,-105,-38, -127,-86,-95,87,56,82,-39,3,-65,60,46,-76,-85,64,79,66,75,-38,-127,84,-56,-124,63,31,-90,-41,47,39,48,17,-64,34,84,-124,-4,-112,54,-67,61,127,-15,95,87,-80,71,-7,-127,-64, -69,-26,-66,49,27,29,17,27,-76,26,50,-29,-64,41,51,62,35,-14,-69,33,-17,-48,30,24,-46,-5,12,28,38,-9,-14,11,33,-36,-4,-55,18,-16,5,42,-5,46,43,-29,28,-25,-51,-22, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.01492181234061718, 0.0037161940708756447, 0.0057884152047336102, 0.0043810936622321606, 0.0029506348073482513, 0.0049445973709225655, 0.0074632461182773113, 0.0035907553974539042, 0.01051753293722868, 0.0026494227349758148, 0.0058451066724956036, 0.0049690534360706806, 0.0040909741073846817, 0.007171042263507843, 0.0030701141804456711, 0.0030610868707299232, 0.002673526993021369, 0.0071047078818082809, 0.019704218953847885, 0.0028324569575488567, 0.0022104945965111256, 0.0030982368625700474, 0.0046779792755842209, 0.0068867006339132786, 0.0033463162835687399, 0.0038762127514928579, 0.0074963695369660854, 0.0069995718076825142, 0.0044947233982384205, 0.0073691373690962791, 0.0074135931208729744, 0.0033335187472403049, 0.0021211709827184677, 0.0038404860533773899, 0.0040619452483952045, 0.0034135149326175451, 0.00375213916413486, 0.0028288287576287985, 0.004215738270431757, 0.0047967606224119663, 0.004383657593280077, 0.0086386138573288918, 0.0037271520122885704, 0.003676719730719924, 0.0078472718596458435, 0.0067392224445939064, 0.0088460138067603111, 0.0068544158712029457, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -2313, 6349, 6763, -1328, -57, 13054, 5223, 1418, 12677, 1489, -3584, 1686, 4697, 1680, -250, 804, -1822, 8452, -3916, -890, 1269, 1812, 458, -1048, 37, 4051, -2082, -1490, -709, -2950, 9480, 3309, 884, 922, 657, 1502, 1930, 9012, 1504, 756, 6975, -3180, 953, 2238, -2032, -2037, 17762, 3739, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00021225365344434977, 0.00013281166320666671, 0.00012027893535559997, 0.00020907823636662215, 0.00044216818059794605, 7.2095637733582407e-05, 0.00017431472952011973, 0.00025813133106566966, 8.0140489444602281e-05, 0.0003479571605566889, 0.00014225742779672146, 0.00029901304515078664, 0.00015048180648591369, 0.00026551831979304552, 0.00038246705662459135, 0.0002023371635004878, 0.00019994526519440114, 0.00011799098865594715, 0.00011677742440951988, 0.00033373039332218468, 0.00030687544494867325, 0.00017196526459883898, 0.00028479480533860624, 0.00017296613077633083, 0.00033059745328500867, 0.00012811989290639758, 0.00022076260938774794, 0.00020487360598053783, 0.00034003608743660152, 0.0001531709567643702, 0.00011179866851307452, 0.00019202911062166095, 0.00024768602452240884, 0.00029602323775179684, 0.00023505302669946104, 0.00026310846442356706, 0.00018308081780560315, 9.4360853836406022e-05, 0.0002929854963440448, 0.00022251652262639254, 0.00013641818077303469, 9.1798377980012447e-05, 0.0002398368960712105, 0.0002030054311035201, 0.00024759327061474323, 0.00020125348237343132, 6.1421415011864156e-05, 0.00013125420082360506, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 30,29,-58,1,-35,62,-127,34, 
  /* [1][0][][] */ 1,-51,-127,5,1,-16,110,-112, 
  /* [2][0][][] */ -120,-50,-64,-50,-30,54,-127,-7, 
  /* [3][0][][] */ -52,-41,19,-10,-28,-127,-108,-20, 
  /* [4][0][][] */ -45,-127,-45,13,53,25,-36,-43, 
  /* [5][0][][] */ 66,-37,95,49,-127,54,-66,-103, 
  /* [6][0][][] */ 35,-127,-74,-43,-9,71,-56,-83, 
  /* [7][0][][] */ -23,-87,-61,-64,79,-127,-15,33, 
  /* [8][0][][] */ 46,56,47,58,30,-50,-6,127, 
  /* [9][0][][] */ -27,-50,-53,3,38,-11,127,-7, 
  /* [10][0][][] */ -29,16,-127,25,18,26,110,-123, 
  /* [11][0][][] */ 5,-34,-38,3,-127,20,2,51, 
  /* [12][0][][] */ 103,63,-22,46,-80,127,90,-17, 
  /* [13][0][][] */ -45,-7,26,-20,41,-127,1,71, 
  /* [14][0][][] */ -110,-51,10,35,4,66,-124,-127, 
  /* [15][0][][] */ 60,74,41,3,-127,41,98,-59, 
  /* [16][0][][] */ 3,-49,3,64,-13,-60,10,-127, 
  /* [17][0][][] */ -83,127,33,-15,-70,-53,-82,-79, 
  /* [18][0][][] */ 108,127,-88,-113,113,107,-106,-93, 
  /* [19][0][][] */ -20,92,-16,14,-127,12,-74,-109, 
  /* [20][0][][] */ -127,-1,4,5,24,24,94,44, 
  /* [21][0][][] */ -25,-10,64,19,-93,-108,-127,23, 
  /* [22][0][][] */ -9,-40,-49,-10,-127,-1,0,68, 
  /* [23][0][][] */ 70,-1,-16,-19,127,64,-96,92, 
  /* [24][0][][] */ 127,18,-62,33,-97,11,-1,-9, 
  /* [25][0][][] */ 26,-83,80,105,-58,-127,18,120, 
  /* [26][0][][] */ 22,127,11,59,77,-26,27,-20, 
  /* [27][0][][] */ -127,115,60,-16,120,-68,5,104, 
  /* [28][0][][] */ -74,-75,-59,-34,74,-127,24,-20, 
  /* [29][0][][] */ -52,-28,57,36,127,-98,-70,65, 
  /* [30][0][][] */ 127,49,-117,-96,-72,-80,-77,-72, 
  /* [31][0][][] */ 31,-4,43,75,-127,5,36,-2, 
  /* [32][0][][] */ 127,14,50,46,-29,-55,85,53, 
  /* [33][0][][] */ 127,31,-44,15,-110,-69,19,48, 
  /* [34][0][][] */ 42,-7,-26,22,-41,127,17,-72, 
  /* [35][0][][] */ 127,36,-9,-27,45,-92,39,108, 
  /* [36][0][][] */ -39,-39,73,-103,-25,-18,89,-127, 
  /* [37][0][][] */ 81,-66,58,49,116,-15,41,-127, 
  /* [38][0][][] */ 65,127,6,-31,-30,26,24,81, 
  /* [39][0][][] */ 21,-1,-77,78,-30,-65,-67,127, 
  /* [40][0][][] */ -19,-37,1,-36,21,-127,18,46, 
  /* [41][0][][] */ -29,40,-119,-66,83,127,72,-123, 
  /* [42][0][][] */ 38,-46,-47,20,77,127,31,49, 
  /* [43][0][][] */ 8,40,-18,34,-127,-71,58,-60, 
  /* [44][0][][] */ -127,-52,-8,-27,53,52,-105,-74, 
  /* [45][0][][] */ -58,65,-54,25,39,-12,-75,127, 
  /* [46][0][][] */ -38,63,127,2,-48,-64,-50,46, 
  /* [47][0][][] */ -112,-100,-53,-43,95,127,-50,73, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0025033920537680387, 0.0015664260135963559, 0.0014186108019202948, 0.0024659400805830956, 0.0052150823175907135, 0.00085032056085765362, 0.002055927412584424, 0.0030444890726357698, 0.0009452042868360877, 0.0041039255447685719, 0.0016778325662016869, 0.0035266620106995106, 0.0017748337704688311, 0.0031316138338297606, 0.0045109470374882221, 0.0023864335380494595, 0.0023582226131111383, 0.0013916259631514549, 0.0013773128157481551, 0.0039361300878226757, 0.0036193935666233301, 0.0020282170735299587, 0.0033589671365916729, 0.0020400215871632099, 0.0038991791661828756, 0.0015110897365957499, 0.0026037495117634535, 0.0024163492489606142, 0.0040105017833411694, 0.0018065505428239703, 0.0013185916468501091, 0.0022648568265140057, 0.0029212934896349907, 0.0034913991112262011, 0.0027722956147044897, 0.0031031910330057144, 0.0021593177225440741, 0.0011129240738227963, 0.0034555708989500999, 0.0026244358159601688, 0.0016089625423774123, 0.001082701375707984, 0.0028287181630730629, 0.0023943153209984303, 0.0029201994184404612, 0.0023736522998660803, 0.00072442513192072511, 0.0015480568399652839, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 10604, 14439, 5778, 3672, 2339, -13958, 6510, -6748, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00013781501911580563, 0.00012524472549557686, 0.00014789898705203086, 0.00019130468717776239, 0.00013415903958957642, 0.00014413065218832344, 7.3536582931410521e-05, 0.00012341668480075896, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 43,-57,102,80,35,-47,25,2,-4,57,-38,19,-57,-88,35,2,-121,63,-29,66,-49,73,8,-21,-2,-50,78,-31,-22,29,-33,117,-62,-14,-41,-88,-61,-55,-40,-16,-10,56,-127,16,54,27,36,47, 
  /* [1][0][][] */ -56,-24,58,-4,-27,36,-37,-22,47,-9,4,-25,-13,14,9,18,4,25,11,-5,-51,-22,-72,-26,28,-32,-28,-31,19,-71,-5,-127,-2,-50,-64,-72,-46,-75,-24,20,44,-8,74,-106,-42,-17,-23,1, 
  /* [2][0][][] */ -59,103,-11,41,21,16,19,-35,72,-54,65,84,112,11,33,-60,93,3,8,29,-11,20,11,124,-119,-36,7,-21,3,80,-19,-90,-18,11,0,-78,-29,18,-43,-13,85,-90,21,-11,26,-127,-1,-17, 
  /* [3][0][][] */ 59,-20,-62,41,90,-87,5,-127,-43,-5,-70,-84,-29,127,-18,20,-54,-23,-63,-55,36,89,-6,-51,112,46,63,-74,32,-91,58,-64,61,71,113,-79,-43,18,-32,52,28,84,-84,26,-7,30,11,30, 
  /* [4][0][][] */ -46,33,-46,64,91,-28,24,-41,-32,-1,-56,34,-40,-13,5,-63,19,64,-35,-38,-41,40,-74,-70,17,-9,12,-35,29,-44,-30,57,-7,81,-74,-67,-68,-59,-40,-4,60,-53,127,16,-3,89,-58,-55, 
  /* [5][0][][] */ 57,4,86,-8,-7,15,52,26,127,-6,68,2,66,53,24,-58,-16,29,33,-47,-57,-70,17,45,24,-11,27,44,-39,-23,17,-14,-15,42,-24,57,47,-5,-25,-44,-7,65,39,44,-12,-4,74,7, 
  /* [6][0][][] */ 1,-69,-20,12,33,-9,2,3,-43,-20,100,58,88,69,-37,51,113,-127,-16,-8,-12,-43,-96,36,-76,69,-35,-2,-14,-48,67,-46,97,10,-80,-14,-40,-1,49,12,73,-73,-3,-73,-122,50,-36,24, 
  /* [7][0][][] */ -15,-19,-63,-25,21,107,-5,-4,-13,-54,-127,-103,40,55,-66,-54,-36,27,106,25,-14,-74,60,-10,117,-29,-68,83,-34,-3,-29,-80,-48,76,49,115,89,-55,-31,-38,-27,-16,37,-18,-11,-26,7,-59, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0058571379631757736, 0.0053229006007313728, 0.0062857065349817276, 0.0081304488703608513, 0.005701758898794651, 0.0061255525797605515, 0.0031253048218786716, 0.005245208740234375, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -1810, 434, -332, -423, -298, 9743, -545, -3097, -3930, -987, -6325, 440, -3118, -4496, 722, -943, -7121, 13510, -3790, 1021, -1102, -188, -1662, -267, 19952, 311, -602, -1299, -487, 2031, -545, -7845, -938, 12727, -646, 8691, -57, -2857, 925, -1171, -2514, -402, 4342, 4013, 262, 10349, 109, -2428, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031124489032663405, 0.00012228359992150217, 0.00046572418068535626, 0.00019849343516398221, 0.00015661385259591043, 0.00030891573987901211, 0.00020651621161960065, 0.00020721627515740693, 0.00036517390981316566, 0.0001423706125933677, 0.00042736649629659951, 0.00024658330949023366, 0.00015435177192557603, 0.00016217965458054096, 0.00014707772061228752, 0.000389373570214957, 0.0002888157032430172, 8.4861909272149205e-05, 0.00013433690764941275, 0.0003750809992197901, 0.00023395540483761579, 0.000303886947222054, 0.00017443209071643651, 0.00065269466722384095, 0.00019724972662515938, 0.00025305274175480008, 0.00017671732348389924, 0.00014522059063892812, 0.00025669235037639737, 0.00016417767619714141, 0.00034767246688716114, 0.00052836275426670909, 0.00035393316647969186, 0.00013027104432694614, 0.00049108912935480475, 0.00016149523435160518, 0.00016829012020025402, 8.7302330939564854e-05, 0.00036805545096285641, 0.00061313482001423836, 0.00021688843844458461, 0.00059885653899982572, 0.00043185462709516287, 0.00020120620320085436, 0.00018668240227270871, 0.00011061648547183722, 0.00020025193225592375, 0.00026824176893569529, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -6,-39,37,-21,127,-6,1,-21,-42,48,-16,9,61,12,127,-35,9,-27,-37,-21,-28,-16,-54,26,-122,52,33,-49,-10,7,-18,-3,-37,3,20,-3,88,47,28,-4,61,17,-14,6,-98,-14,-46,-38, 8,-97,-69,-17,-42,-7,49,16,10,2,63,127,-16,45,-82,127,-8,-66,37,-57,-70,-127,-76,77,-127,-84,22,123,11,23,127,10,-127,-127,-45,35,127,-110,118,14,56,-14,-23,-6,-58,-19,77,5, 10,-19,-8,127,48,7,-88,-7,-33,-39,-23,-22,56,-14,-70,-44,17,18,2,-15,0,2,-25,15,-61,-73,-30,32,3,25,-81,-6,19,44,20,17,-1,90,-127,4,26,-9,-9,34,-127,-8,-52,43, 
  /* [0][1][][] */ -104,-57,127,-1,-28,-40,95,11,17,89,4,13,42,27,111,33,27,-127,82,38,81,-10,61,-37,-13,-19,39,-58,28,48,34,52,35,-109,7,127,10,27,-49,-109,13,98,-20,-72,29,-94,-67,25, 127,-56,-64,-59,7,-127,127,127,127,12,127,-45,-127,12,-44,-40,127,-90,127,127,127,76,127,-127,4,-29,101,-17,127,127,-116,127,32,-97,127,-112,-66,127,-104,127,-127,-127,127,-127,95,-127,127,-110, -9,-100,18,73,-18,-11,-57,4,-16,-127,-31,46,74,1,-61,45,22,8,6,12,-1,-25,39,-22,-10,3,-127,73,-62,7,80,21,-10,-107,-16,-49,60,15,117,16,19,59,-46,10,57,-34,-54,127, 
  /* [0][2][][] */ -3,126,26,-25,79,13,-35,-22,-35,17,-13,-1,43,21,103,13,-20,14,-18,-52,-14,13,-1,16,-22,-10,33,-4,-49,-122,-17,-5,-10,43,-17,30,-61,43,5,103,4,18,-2,12,26,-9,-28,-37, 7,100,-45,20,26,-36,-5,28,27,14,21,-37,23,127,-84,-70,-1,-18,97,-84,-51,79,-4,53,75,127,0,127,-65,-124,-16,0,101,-93,-82,-7,-72,-41,-35,-122,37,-24,-56,76,53,12,16,12, 16,127,-11,27,17,7,-69,-11,-29,-18,-3,-8,51,-5,-75,1,-11,8,-18,-30,-9,8,-8,4,-53,23,-46,9,45,-81,22,1,11,56,0,-26,-46,79,7,2,-25,-8,0,-12,18,-2,-3,26, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013227907940745354, 0.0051970528438687325, 0.019793277606368065, 0.0084359711036086082, 0.006656088400632143, 0.013128918595612049, 0.0087769385427236557, 0.0088066915050148964, 0.015519890934228897, 0.0060507506132125854, 0.018163075670599937, 0.010479790158569813, 0.0065599502995610237, 0.0068926350213587284, 0.006250802893191576, 0.016548376530408859, 0.0122746666893363, 0.0036066309548914433, 0.0057093184441328049, 0.015940941870212555, 0.0099431043490767479, 0.012915194965898991, 0.007413364015519619, 0.027739522978663445, 0.0083831129595637321, 0.010754741728305817, 0.0075104860588908195, 0.0061718747019767761, 0.010909424163401127, 0.0069775511510670185, 0.01477607898414135, 0.022455416619777679, 0.015042159706354141, 0.0055365194566547871, 0.02087128721177578, 0.0068635470233857632, 0.0071523296646773815, 0.0037103490903973579, 0.015642356127500534, 0.026058230549097061, 0.0092177586629986763, 0.025451401248574257, 0.018353821709752083, 0.0085512632504105568, 0.0079340022057294846, 0.0047012004069983959, 0.0085107069462537766, 0.011400274932384491, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 7772, 2426, 40780, -2824, -1098, 9471, -772, 1494, 3921, -94, 9235, 525, 3121, 3989, 4148, 3567, 3237, 2831, -809, 6480, 1504, 369, 1273, 15601, 27058, 5830, 5069, -1461, -338, 8309, 8067, 11535, 11667, 4570, 9128, -1145, 442, 2262, 9261, 5285, 624, 19806, 14464, 4674, 7706, 2442, 4075, 913, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00011133609950775281, 0.00022447413357440382, 3.1897856388241053e-05, 0.00019085034728050232, 0.00034229212906211615, 0.00011427062418079004, 0.00020513932395260781, 0.00038844879600219429, 0.00017033627955242991, 0.000242848094785586, 9.398891415912658e-05, 0.00032523155095987022, 0.00016771547961980104, 0.00019122015510220081, 0.00014716602163389325, 0.00021005666349083185, 0.00013817251601722091, 0.00017537639359943569, 0.00032795080915093422, 0.0001402008201694116, 0.00023000458895694464, 0.0002725252415984869, 0.00022176209313329309, 6.5308457124046981e-05, 5.7892095355782658e-05, 0.00014308908430393785, 0.00015486303891520947, 0.00023203020100481808, 0.0003481637395452708, 0.00010729240602813661, 0.00010820796160260215, 8.4219020209275186e-05, 7.9506702604703605e-05, 0.00018780809477902949, 0.00010034587467089295, 0.00016940914792940021, 0.00026497367070987821, 0.00015796767547726631, 9.6116003987845033e-05, 0.00016446532390546054, 0.0001740961306495592, 5.3672294598072767e-05, 7.9924029705580324e-05, 0.00016269288607873023, 0.0001180738618131727, 0.00025996699696406722, 0.0001924935495480895, 0.00024649157421663404, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -26,24,16,-127,-108,1,17,116, 
  /* [1][0][][] */ 107,4,-11,5,-78,43,127,24, 
  /* [2][0][][] */ -12,124,-30,-27,-32,101,-51,-127, 
  /* [3][0][][] */ 72,-89,-114,126,-127,-41,-11,-29, 
  /* [4][0][][] */ 43,-58,37,-22,-127,2,55,26, 
  /* [5][0][][] */ -23,54,-17,-100,-127,0,-35,4, 
  /* [6][0][][] */ 39,-13,20,16,117,-25,-12,-127, 
  /* [7][0][][] */ 11,39,22,127,27,-1,-9,25, 
  /* [8][0][][] */ 23,23,11,-52,43,127,9,-34, 
  /* [9][0][][] */ 92,21,-9,20,-62,-56,127,64, 
  /* [10][0][][] */ 6,67,-67,-25,1,127,86,-62, 
  /* [11][0][][] */ -9,-32,-127,86,-55,32,-19,69, 
  /* [12][0][][] */ -89,-85,55,46,29,-127,-40,8, 
  /* [13][0][][] */ 36,33,29,45,-54,127,10,-38, 
  /* [14][0][][] */ 4,-89,-11,-20,-56,-54,-127,93, 
  /* [15][0][][] */ -94,46,-14,1,86,5,-127,-40, 
  /* [16][0][][] */ 105,82,-90,-127,54,120,113,44, 
  /* [17][0][][] */ -104,125,-127,42,-9,-15,17,-110, 
  /* [18][0][][] */ 33,-8,-82,127,-13,-39,-37,-57, 
  /* [19][0][][] */ 121,8,13,21,-34,10,127,38, 
  /* [20][0][][] */ 42,-77,-74,127,37,-36,-22,-53, 
  /* [21][0][][] */ 25,49,127,-112,46,-33,30,-103, 
  /* [22][0][][] */ -87,-36,-127,63,-31,22,12,120, 
  /* [23][0][][] */ 87,23,34,32,-127,115,64,-62, 
  /* [24][0][][] */ -7,-1,-127,79,-31,33,40,70, 
  /* [25][0][][] */ 48,-43,-87,127,57,0,-47,-21, 
  /* [26][0][][] */ -93,34,127,-115,-26,30,57,2, 
  /* [27][0][][] */ -71,77,127,2,21,-7,66,16, 
  /* [28][0][][] */ -57,-109,47,-127,-18,2,-4,-19, 
  /* [29][0][][] */ -70,-77,-17,81,-2,-127,-13,52, 
  /* [30][0][][] */ -127,58,108,-32,36,46,61,32, 
  /* [31][0][][] */ -58,52,77,-127,-43,18,30,58, 
  /* [32][0][][] */ -87,83,114,-127,19,-7,2,121, 
  /* [33][0][][] */ 4,96,-40,53,26,17,-127,-19, 
  /* [34][0][][] */ 85,6,127,-104,-101,-96,44,-47, 
  /* [35][0][][] */ 77,-5,28,97,72,-62,26,-127, 
  /* [36][0][][] */ 23,58,127,-100,23,-16,41,-107, 
  /* [37][0][][] */ -60,-44,105,65,0,-127,89,-9, 
  /* [38][0][][] */ 66,2,70,42,-39,-52,127,22, 
  /* [39][0][][] */ 73,-102,-18,23,-127,10,95,69, 
  /* [40][0][][] */ -34,19,-127,105,-36,58,-97,122, 
  /* [41][0][][] */ -126,-8,-51,5,127,30,-87,24, 
  /* [42][0][][] */ -80,72,-36,-28,127,43,-106,-50, 
  /* [43][0][][] */ 119,90,-26,127,-8,-98,51,59, 
  /* [44][0][][] */ -1,11,84,-1,50,-127,16,-18, 
  /* [45][0][][] */ -11,-77,127,78,-27,-23,-111,23, 
  /* [46][0][][] */ 34,-121,-127,43,-86,15,-17,-17, 
  /* [47][0][][] */ -92,-26,29,-14,60,38,-127,-34, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0024015232920646667, 0.0048419144004583359, 0.00068803777685388923, 0.0041166483424603939, 0.0073832524940371513, 0.0024648210965096951, 0.0044248620979487896, 0.0083788530901074409, 0.0036741592921316624, 0.0052382415160536766, 0.0020273439586162567, 0.0070152552798390388, 0.0036176284775137901, 0.0041246251203119755, 0.0031743759755045176, 0.0045309290289878845, 0.0029803856741636992, 0.0037828744389116764, 0.0070739095099270344, 0.0030241361819207668, 0.0049612065777182579, 0.0058783786371350288, 0.0047834157012403011, 0.0014087054878473282, 0.0012487344210967422, 0.0030864363070577383, 0.003340400755405426, 0.0050048991106450558, 0.0075099035166203976, 0.0023143007420003414, 0.002334049204364419, 0.0018166070803999901, 0.0017149621853604913, 0.0040510268881917, 0.0021644637454301119, 0.0036541610024869442, 0.005715490784496069, 0.0034073679707944393, 0.0020732253324240446, 0.003547522472217679, 0.0037552593275904655, 0.0011577131226658821, 0.0017239638837054372, 0.003509290749207139, 0.0025468571111559868, 0.0056074969470500946, 0.0041520921513438225, 0.0053168316371738911, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -12365, 1248, -17389, -254, 2669, -3180, 10754, 527, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0001487754489062354, 0.0001163352862931788, 8.0623234680388123e-05, 7.1068941906560212e-05, 0.00017517502419650555, 0.00012156867160229012, 0.0001063137169694528, 0.00011562817962840199, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 48,109,-42,70,-1,-6,-20,7,60,-66,4,-26,5,9,-34,-56,-1,-17,31,13,-57,-32,-35,13,16,20,26,-4,17,12,-18,27,-60,9,115,-127,-21,17,-14,118,-34,16,15,2,-14,33,28,-44, 
  /* [1][0][][] */ 3,-51,32,53,-10,-11,-19,-20,46,-38,88,45,15,9,-47,-75,127,37,22,7,-71,31,39,-7,-47,-92,-26,-45,-9,-59,40,-35,-12,-26,-29,17,5,-16,87,-45,-12,29,-60,34,75,66,11,48, 
  /* [2][0][][] */ 82,-28,-15,-20,110,113,63,72,-28,-15,-2,-32,-6,43,61,28,-30,-33,60,-72,-45,-48,-42,60,-96,-94,125,14,61,-67,-58,21,-127,87,111,23,-6,4,-6,18,31,69,15,-57,-21,18,53,-45, 
  /* [3][0][][] */ 74,-35,19,-11,125,126,23,51,-32,-23,27,49,-127,38,73,28,8,7,68,-113,-87,16,28,89,10,-35,55,29,50,-61,-2,-11,-112,59,-59,-120,23,-44,65,-54,51,-87,-103,-35,-61,36,-13,57, 
  /* [4][0][][] */ 34,38,-29,-35,-14,-10,-23,-17,7,-5,-12,-14,-32,-23,58,50,-40,-18,-29,42,26,-11,-12,3,-48,-43,-4,57,-13,10,-22,32,-36,-16,27,-127,-9,31,14,51,10,-15,-12,-25,43,6,81,-20, 
  /* [5][0][][] */ 68,59,-92,53,6,1,-2,26,-86,-54,-53,-21,32,27,46,28,43,-60,39,127,-65,-48,-55,49,28,-25,-40,60,29,28,-56,0,-2,2,-60,0,-7,13,-24,74,15,79,-10,-42,120,24,22,-57, 
  /* [6][0][][] */ -27,-72,17,-46,-42,-41,-78,-78,-37,-66,-116,42,-58,-50,95,92,-127,11,23,-20,16,54,69,16,-16,-6,-73,84,-82,-42,44,74,19,-64,93,41,25,43,-14,-82,-20,-61,-27,18,-42,-22,-6,62, 
  /* [7][0][][] */ 78,20,-16,41,16,15,10,5,84,-5,-12,-22,61,5,-13,-23,-55,-8,-31,-2,2,-22,-24,-28,71,-127,17,-1,4,98,-16,17,-73,23,-58,-49,-12,28,27,24,19,69,-33,-16,-44,30,44,-23, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0063229566439986229, 0.0049442495219409466, 0.0034264875575900078, 0.0030204299837350845, 0.0074449381791055202, 0.0051666684448719025, 0.0045183328911662102, 0.0049141976051032543, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { -316, 8445, 153, -1083, 1073, 1253, 8458, 7622, -253, -6143, 535, 259, 7450, 4935, 21271, 20398, -2005, -1214, 4012, 10128, 16373, -10, -254, -622, 4717, -889, 2640, 17550, 7266, 12967, -513, 2956, -2021, -5148, -2006, 444, -95, 471, -433, 5245, 5204, 5026, -6764, -292, -974, -935, 8493, -279, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.9796932772733271e-05, 0.00014174793614074588, 0.00051712687127292156, 6.3038292864803225e-05, 0.00051961146527901292, 0.0005897069931961596, 0.00012106651411158964, 0.00016223400598391891, 7.3393886850681156e-05, 0.00023636146215721965, 0.00048632727703079581, 0.00023504643468186259, 0.00018460492719896138, 0.0001608463644515723, 6.3813400629442185e-05, 5.2491493988782167e-05, 0.00012664434325415641, 0.00038487324491143227, 5.3749990911455825e-05, 0.00010543119424255565, 5.9980473452014849e-05, 0.00076717569027096033, 0.0013728584162890911, 0.00023212919768411666, 5.7757464674068615e-05, 0.0001456435420550406, 9.5426104962825775e-05, 0.00012667711416725069, 0.00014291623665485531, 0.00012340705143287778, 0.0005058904062025249, 0.00018336088396608829, 9.2667345597874373e-05, 0.00023322454944718629, 8.1985614087898284e-05, 7.1097500040195882e-05, 0.00029787080711685121, 0.00033198279561474919, 0.00012834242079406977, 0.00017190206563100219, 8.9002540335059166e-05, 0.00021449493942782283, 0.00010116471821675077, 0.00034894983400590718, 7.3895083914976567e-05, 0.00018024246674031019, 9.8881704616360366e-05, 0.00053105643019080162, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -15,-87,-98,86,-87,3,-90,-77,60,56,127,-39,9,1,-75,-64,104,-88,27,-35,-14,-106,-36,-86,80,104,3,-122,-1,-38,62,73,51,73,59,20,90,83,35,7,-127,-22,30,49,-38,16,-28,-93, 88,-16,35,72,-127,40,-67,4,97,90,110,75,-13,-73,-127,-99,127,-40,107,-89,-108,127,127,38,127,102,47,-102,-80,-53,-100,109,97,127,83,102,-14,80,66,-74,-93,-84,26,-50,-53,92,-40,105, 110,-5,56,67,-82,8,-40,-9,21,64,-13,-31,-81,-4,-39,-56,46,78,65,-19,-56,-25,-79,94,37,24,26,-20,-5,-32,27,36,48,92,11,68,-7,12,40,-11,-58,-11,0,19,-16,60,-6,-2, 
  /* [0][1][][] */ 47,-127,122,102,87,-72,-127,-127,111,73,98,-54,3,-11,-91,-89,98,127,33,-97,-21,111,33,-127,98,127,112,-127,-7,-113,-71,95,107,2,100,54,30,127,58,-4,-13,-35,100,98,-111,47,-87,111, 127,-18,4,127,120,-127,-102,2,127,127,124,64,-36,-127,-111,-127,127,62,127,-127,-127,-123,-116,49,118,117,127,-116,-127,-127,127,127,127,6,127,127,-1,115,127,-127,8,-127,125,-87,-127,127,-108,-127, 106,-8,-127,74,83,-62,-48,-10,17,79,-1,-24,-127,-7,-18,-43,45,-97,72,-51,-71,8,74,87,56,43,2,-34,-16,-92,-36,23,30,-2,38,78,0,9,57,-6,-27,-13,39,-7,-72,24,-42,11, 
  /* [0][2][][] */ 61,-79,10,40,-2,63,-74,-80,28,21,23,46,12,1,-41,-43,18,-38,4,-68,-3,0,15,-82,19,44,81,-19,3,-100,14,17,71,-75,72,24,-127,8,10,-5,25,-10,92,-127,-67,27,-81,-8, 42,-3,4,55,7,89,-29,-5,20,56,-14,-127,-20,-88,-41,-46,25,-13,52,-104,-35,-13,-30,35,26,41,82,-39,-90,-95,-24,17,72,-80,59,32,17,24,63,-49,122,-64,127,108,-101,81,-127,17, -36,-10,-9,49,-21,36,-20,0,-3,18,-81,36,-81,-7,-13,-5,-8,23,37,-13,-31,21,22,44,23,26,32,16,-2,-63,14,-21,4,-41,15,28,7,-40,33,6,60,-5,25,-5,-22,65,-30,-5, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0042413696646690369, 0.0060242870822548866, 0.021977892145514488, 0.0026791275013238192, 0.02208348736166954, 0.025062546133995056, 0.0051453267224133015, 0.0068949451670050621, 0.0031192402821034193, 0.010045361705124378, 0.020668908953666687, 0.0099894730374217033, 0.0078457091003656387, 0.0068359705619513988, 0.0027120695449411869, 0.0022308884654194117, 0.0053823846392333508, 0.016357112675905228, 0.0022843745537102222, 0.004480825737118721, 0.0025491700507700443, 0.032604966312646866, 0.058346480131149292, 0.0098654907196760178, 0.0024546922650188208, 0.0061898506246507168, 0.0040556094609200954, 0.0053837769664824009, 0.0060739400796592236, 0.0052447994239628315, 0.021500341594219208, 0.0077928374521434307, 0.0039383620023727417, 0.0099120428785681725, 0.003484388580545783, 0.0030216437298804522, 0.012659509666264057, 0.01410926878452301, 0.0054545528255403042, 0.0073058377020061016, 0.0037826078478246927, 0.0091160349547863007, 0.0042995004914700985, 0.014830367639660835, 0.0031405410263687372, 0.0076603046618402004, 0.0042024725116789341, 0.022569898515939713, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 12350, 5353, 15331, 2673, 5055, 4867, -4590, 4847, 2827, -3188, -3704, 5523, -3709, -5506, 8703, 1806, -2419, 3095, -2154, 3433, 707, 5161, 4612, -2574, -635, -5341, 2787, -4426, 4254, 8620, 68, 219, 8391, 11987, 8808, 5676, 6614, -5104, 692, 5484, -581, -5172, 4872, 1845, 357, -7093, -13120, 2484, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00037713008350692689, 0.00053927418775856495, 7.3890798375941813e-05, 0.00066002627136185765, 0.00035984624992124736, 0.00035588545142672956, 0.0014083473943173885, 0.0008863867842592299, 0.00097685318905860186, 0.00049021723680198193, 0.00011985818127868697, 0.00045126269105821848, 0.00040087799425236881, 0.00082473561633378267, 0.00048738994519226253, 0.0016176040517166257, 0.0010324782924726605, 0.00031967516406439245, 0.00094817852368578315, 0.0013636171352118254, 0.00067196774762123823, 0.00032245085458271205, 8.3427825302351266e-05, 0.00038750111707486212, 0.00098500330932438374, 0.00073537544813007116, 0.00082002783892676234, 0.00041122344555333257, 0.00086448353249579668, 0.00061247323174029589, 0.00025720271514728665, 0.00043039786396548152, 0.00068195164203643799, 0.00023711065296083689, 0.00040300449472852051, 0.00030288487323559821, 0.00045315781608223915, 0.0013256253441795707, 0.00044816310401074588, 0.00056690181372687221, 0.0011875791242346168, 0.0005164523608982563, 0.00071485806256532669, 0.0002035648503806442, 0.0010965752881020308, 0.00056558643700554967, 0.00061225704848766327, 0.00041477000922895968, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -95,-110,18,-127,-58,-4,-5,-5, 
  /* [1][0][][] */ -127,-10,99,-3,-44,17,7,11, 
  /* [2][0][][] */ 30,-10,22,127,28,-22,-13,-14, 
  /* [3][0][][] */ -101,-69,-28,-20,34,127,-46,-29, 
  /* [4][0][][] */ -5,-32,-8,-2,-9,9,-127,-75, 
  /* [5][0][][] */ -1,-38,-16,-2,-8,12,-127,-78, 
  /* [6][0][][] */ 127,5,15,-12,-66,18,4,-7, 
  /* [7][0][][] */ -127,-29,-12,4,68,13,3,6, 
  /* [8][0][][] */ 25,44,-13,-12,-25,-127,44,15, 
  /* [9][0][][] */ 76,22,-11,-4,-24,-5,-7,127, 
  /* [10][0][][] */ 111,-7,-113,9,-85,-13,39,127, 
  /* [11][0][][] */ -127,94,-2,-33,80,-60,5,29, 
  /* [12][0][][] */ 127,-34,-106,9,59,-5,-4,-26, 
  /* [13][0][][] */ 127,9,13,-10,-27,28,10,-15, 
  /* [14][0][][] */ -127,-80,108,-22,73,-18,-47,-126, 
  /* [15][0][][] */ 33,76,3,-8,-7,-127,-16,6, 
  /* [16][0][][] */ -10,-64,12,6,12,127,12,5, 
  /* [17][0][][] */ 29,-127,-61,-10,-33,107,-57,-16, 
  /* [18][0][][] */ 46,-19,-15,-20,-13,28,127,-12, 
  /* [19][0][][] */ -8,25,0,-127,-13,41,-5,-11, 
  /* [20][0][][] */ -84,-37,80,6,54,104,-8,-127, 
  /* [21][0][][] */ -21,-9,38,-21,-23,15,-127,-83, 
  /* [22][0][][] */ 71,-10,10,127,-21,-10,58,36, 
  /* [23][0][][] */ 127,-14,-121,-16,31,-30,4,12, 
  /* [24][0][][] */ -29,22,30,37,11,0,-127,-82, 
  /* [25][0][][] */ 127,8,-86,8,15,-7,3,27, 
  /* [26][0][][] */ 2,56,-32,-127,-26,24,3,-1, 
  /* [27][0][][] */ 127,19,-105,-2,-101,49,15,85, 
  /* [28][0][][] */ -127,-23,-22,15,55,13,1,29, 
  /* [29][0][][] */ -5,-127,-14,-127,-8,23,-13,-25, 
  /* [30][0][][] */ 6,93,127,34,31,-96,115,29, 
  /* [31][0][][] */ -80,-5,-127,47,-8,-16,102,102, 
  /* [32][0][][] */ -4,-121,0,-127,-13,13,-12,-16, 
  /* [33][0][][] */ 14,-127,2,-119,8,9,3,-22, 
  /* [34][0][][] */ -25,-52,28,-96,38,-53,127,81, 
  /* [35][0][][] */ -127,8,60,1,-121,-27,28,100, 
  /* [36][0][][] */ -126,11,127,-9,-46,12,-30,29, 
  /* [37][0][][] */ 127,11,-6,-7,-76,21,3,14, 
  /* [38][0][][] */ -77,10,78,36,65,-50,51,127, 
  /* [39][0][][] */ -127,-2,70,-5,-65,7,-7,2, 
  /* [40][0][][] */ -9,26,45,-20,22,-6,127,44, 
  /* [41][0][][] */ 127,-11,-71,1,59,12,11,-12, 
  /* [42][0][][] */ -13,-127,33,-14,16,1,-6,-19, 
  /* [43][0][][] */ 15,122,127,-12,60,-107,82,3, 
  /* [44][0][][] */ 6,-12,-2,116,1,-127,-2,3, 
  /* [45][0][][] */ 127,-29,36,-9,-55,103,12,-2, 
  /* [46][0][][] */ 15,125,-18,102,0,127,23,40, 
  /* [47][0][][] */ -13,32,6,-29,32,-36,127,73, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0053592212498188019, 0.0076633761636912823, 0.001050027902238071, 0.009379328228533268, 0.0051136086694896221, 0.0050573232583701611, 0.020013373345136642, 0.012596032582223415, 0.013881608843803406, 0.0069662504829466343, 0.0017032491741701961, 0.0064126853831112385, 0.0056966915726661682, 0.01171993650496006, 0.0069260727614164352, 0.022987022995948792, 0.014672071672976017, 0.0045427558943629265, 0.013474126346409321, 0.019377732649445534, 0.0095490226522088051, 0.0045821997337043285, 0.0011855541961267591, 0.0055065988563001156, 0.013997426256537437, 0.010450080037117004, 0.011653035879135132, 0.0058437059633433819, 0.012284775264561176, 0.0087035736069083214, 0.0036549889482557774, 0.0061161848716437817, 0.0096908994019031525, 0.0033694696612656116, 0.0057269101962447166, 0.0043041566386818886, 0.006439615972340107, 0.018837848678231239, 0.0063686384819447994, 0.008055979385972023, 0.016876136884093285, 0.0073390654288232327, 0.010158517397940159, 0.0028927659150213003, 0.015582923777401447, 0.0080372868105769157, 0.0087005011737346649, 0.0058941044844686985, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 4783, -4817, -273, 3081, 2893, 527, -3554, 3213, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 7.0856287493370473e-05, 0.00013267154281493276, 8.822775271255523e-05, 5.6672004575375468e-05, 0.00013143985415808856, 0.00018154400459025055, 0.0001066990735125728, 0.00019765233446378261, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -21,-4,-49,-37,-17,38,-127,-8, 
  /* [1][0][][] */ 18,89,-3,127,9,-7,-10,-34, 
  /* [2][0][][] */ 127,-4,-32,-53,-64,48,90,-50, 
  /* [3][0][][] */ 12,-127,42,-86,20,-84,27,65, 
  /* [4][0][][] */ 114,-3,-57,-8,26,-4,-127,-48, 
  /* [5][0][][] */ 3,-35,4,38,3,-127,0,10, 
  /* [6][0][][] */ 127,-24,118,4,104,-32,-4,1, 
  /* [7][0][][] */ -127,-3,-95,-4,-100,8,35,4, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0030113921966403723, 0.0056385407224297523, 0.0037496795412153006, 0.0024085601326078176, 0.0055861938744783401, 0.0077156201004981995, 0.0045347106643021107, 0.0084002241492271423, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -10778, 11170, 1098, -12466, -737, -13633, 183, 232, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00028690445469692349, 0.00035156917874701321, 0.00022410237579606473, 0.0003435232792980969, 0.00036411566543392837, 0.00032198213739320636, 0.0010486758546903729, 0.0014757434837520123, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -1,0,21,19,11,1,9,31, 5,2,-32,127,-22,2,-3,30, -5,1,-12,20,-6,3,-5,21, 
  /* [0][1][][] */ -5,-2,127,-23,127,-3,-110,40, 127,-127,-95,9,-87,127,-13,-127, -26,2,9,-23,-3,0,127,41, 
  /* [0][2][][] */ 1,0,13,4,14,0,16,33, 6,4,-40,-2,-14,2,-9,-106, -3,-2,-15,0,-4,0,-5,37, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.012193438597023487, 0.014941689558327198, 0.0095243509858846664, 0.014599738642573357, 0.015474915504455566, 0.01368424016982317, 0.044568724930286407, 0.062719099223613739, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 12155, 9102, 141, 35288, 4535, 9892, 78923, 5363, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00020324921933934093, 0.00022759937564842403, 0.00010853315325221047, 7.5570940680336207e-05, 0.00016608079022262245, 0.00023487773432862014, 1.8693717720452696e-05, 5.70218289794866e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 50, 9, 
  /* [0][1][][] */ -127, 122, 0, 
  /* [0][2][][] */ -42, 46, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -44, 
  /* [1][2][][] */ 7, -41, 6, 
  /* [2][0][][] */ 30, 27, -47, 
  /* [2][1][][] */ 51, 68, -127, 
  /* [2][2][][] */ 20, 32, -59, 
  /* [3][0][][] */ 41, 51, 19, 
  /* [3][1][][] */ 51, 72, 24, 
  /* [3][2][][] */ -81, -127, -58, 
  /* [4][0][][] */ 4, -53, 47, 
  /* [4][1][][] */ 16, -127, 112, 
  /* [4][2][][] */ 5, -37, 32, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ -1, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -23, -92, 9, 
  /* [6][1][][] */ -19, -127, 5, 
  /* [6][2][][] */ -10, -55, 16, 
  /* [7][0][][] */ 46, -127, 32, 
  /* [7][1][][] */ -18, -4, -9, 
  /* [7][2][][] */ -24, 75, -9, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.062535926699638367, 0.070028007030487061, 0.033393591642379761, 0.023251743987202644, 0.051099907606840134, 0.072267420589923859, 0.0057517020031809807, 0.017544534057378769, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.064102575182914734, } };
const TfArray<1, int> quant46_zero = { 1, { 37 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.070370316505432129, } };
const TfArray<1, int> quant47_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.046360615640878677, } };
const TfArray<1, int> quant51_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.075848177075386047, } };
const TfArray<1, int> quant54_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.084786422550678253, } };
const TfArray<1, int> quant55_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.019990099593997002, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.019990099593997002, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.04858032613992691, } };
const TfArray<1, int> quant59_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.019017685204744339, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.020585376769304276, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.030716974288225174, } };
const TfArray<1, int> quant62_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.059973683208227158, } };
const TfArray<1, int> quant63_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.019123563542962074, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.048035528510808945, } };
const TfArray<1, int> quant66_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.067385360598564148, } };
const TfArray<1, int> quant67_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.024599241092801094, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,5 } };
const TfArray<1, float> quant70_scale = { 1, { 0.06728324294090271, } };
const TfArray<1, int> quant70_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,6,6,5 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension48, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension56, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension60, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension62, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4320), (TfLiteIntArray*)&g0::tensor_dimension63, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension64, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2016), (TfLiteIntArray*)&g0::tensor_dimension66, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension67, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension69, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 192), (TfLiteIntArray*)&g0::tensor_dimension70, 180, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 180, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
